Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CTE_STRING
    DO
    PRINT
    WHILE

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> PROGRAM ID SEMICOLON DEC_VARS DEC_FUNCS MAIN BODY END
Rule 2     DEC_VARS -> epsilon
Rule 3     DEC_VARS -> VARS
Rule 4     SOLO_FUNCS -> FUNCS MAS_FUNCS
Rule 5     MAS_FUNCS -> epsilon
Rule 6     MAS_FUNCS -> SOLO_FUNCS
Rule 7     DEC_FUNCS -> epsilon
Rule 8     DEC_FUNCS -> SOLO_FUNCS
Rule 9     VARS -> VAR LISTA_VAR
Rule 10    LISTA_VAR -> LISTA_ID COLON TYPE SEMICOLON MAS_VAR
Rule 11    MAS_VAR -> epsilon
Rule 12    MAS_VAR -> LISTA_VAR
Rule 13    LISTA_ID -> ID MAS_ID
Rule 14    MAS_ID -> COMMA LISTA_ID
Rule 15    MAS_ID -> epsilon
Rule 16    TYPE -> INT
Rule 17    TYPE -> FLOAT
Rule 18    FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON
Rule 19    PARAMETROS -> epsilon
Rule 20    PARAMETROS -> DEC_PARAMETROS
Rule 21    DEC_PARAMETROS -> ID COLON TYPE LISTA_PARAMETROS
Rule 22    LISTA_PARAMETROS -> epsilon
Rule 23    LISTA_PARAMETROS -> COMMA DEC_PARAMETROS
Rule 24    VARS_FUNC -> epsilon
Rule 25    VARS_FUNC -> VARS
Rule 26    BODY -> LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE
Rule 27    DEC_STATEMENTS -> epsilon
Rule 28    DEC_STATEMENTS -> LISTA_STATEMENTS
Rule 29    LISTA_STATEMENTS -> STATEMENT MAS_STATEMENTS
Rule 30    MAS_STATEMENTS -> epsilon
Rule 31    MAS_STATEMENTS -> LISTA_STATEMENTS
Rule 32    STATEMENT -> ASSIGN
Rule 33    STATEMENT -> CONDITION
Rule 34    ASSIGN -> ID EQUAL EXPRESION SEMICOLON
Rule 35    EXPRESION -> EXP MAS_EXPRESIONES
Rule 36    MAS_EXPRESIONES -> epsilon
Rule 37    MAS_EXPRESIONES -> OPERADORES EXP
Rule 38    OPERADORES -> GREATER_THAN
Rule 39    OPERADORES -> LESS_THAN
Rule 40    OPERADORES -> NOT_EQUAL
Rule 41    EXP -> TERMINO MAS_EXP
Rule 42    MAS_EXP -> OPERADORES_EXP EXP
Rule 43    MAS_EXP -> epsilon
Rule 44    OPERADORES_EXP -> PLUS
Rule 45    OPERADORES_EXP -> MINUS
Rule 46    TERMINO -> FACTOR MAS_TERMINO
Rule 47    MAS_TERMINO -> epsilon
Rule 48    MAS_TERMINO -> OPERADORES_TER TERMINO
Rule 49    OPERADORES_TER -> MULTIPLICATION
Rule 50    OPERADORES_TER -> DIVISION
Rule 51    FACTOR -> OPERADORES_FACTOR ID_CTE
Rule 52    FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS
Rule 53    ID_CTE -> ID
Rule 54    ID_CTE -> CTE
Rule 55    OPERADORES_FACTOR -> PLUS
Rule 56    OPERADORES_FACTOR -> MINUS
Rule 57    OPERADORES_FACTOR -> epsilon
Rule 58    CTE -> CTE_INT
Rule 59    CTE -> CTE_FLOAT
Rule 60    CONDITION -> IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITION
Rule 61    ELSE_CONDITION -> epsilon
Rule 62    ELSE_CONDITION -> ELSE BODY
Rule 63    epsilon -> <empty>

Terminals, with rules where they appear

COLON                : 10 21
COMMA                : 14 23
CTE_FLOAT            : 59
CTE_INT              : 58
CTE_STRING           : 
DIVISION             : 50
DO                   : 
ELSE                 : 62
END                  : 1
EQUAL                : 34
FLOAT                : 17
GREATER_THAN         : 38
ID                   : 1 13 18 21 34 53
IF                   : 60
INT                  : 16
LEFT_BRACE           : 26
LEFT_BRACKET         : 18
LEFT_PARENTHESIS     : 18 52 60
LESS_THAN            : 39
MAIN                 : 1
MINUS                : 45 56
MULTIPLICATION       : 49
NOT_EQUAL            : 40
PLUS                 : 44 55
PRINT                : 
PROGRAM              : 1
RIGHT_BRACE          : 26
RIGHT_BRACKET        : 18
RIGHT_PARENTHESIS    : 18 52 60
SEMICOLON            : 1 10 18 34
VAR                  : 9
VOID                 : 18
WHILE                : 
error                : 

Nonterminals, with rules where they appear

ASSIGN               : 32
BODY                 : 1 18 60 62
CONDITION            : 33
CTE                  : 54
DEC_FUNCS            : 1
DEC_PARAMETROS       : 20 23
DEC_STATEMENTS       : 26
DEC_VARS             : 1
ELSE_CONDITION       : 60
EXP                  : 35 37 42
EXPRESION            : 34 52 60
FACTOR               : 46
FUNCS                : 4
ID_CTE               : 51
LISTA_ID             : 10 14
LISTA_PARAMETROS     : 21
LISTA_STATEMENTS     : 28 31
LISTA_VAR            : 9 12
MAS_EXP              : 41
MAS_EXPRESIONES      : 35
MAS_FUNCS            : 4
MAS_ID               : 13
MAS_STATEMENTS       : 29
MAS_TERMINO          : 46
MAS_VAR              : 10
OPERADORES           : 37
OPERADORES_EXP       : 42
OPERADORES_FACTOR    : 51
OPERADORES_TER       : 48
PARAMETROS           : 18
PROGRAMA             : 0
SOLO_FUNCS           : 6 8
STATEMENT            : 29
TERMINO              : 41 48
TYPE                 : 10 21
VARS                 : 3 25
VARS_FUNC            : 18
epsilon              : 2 5 7 11 15 19 22 24 27 30 36 43 47 57 61

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . PROGRAM ID SEMICOLON DEC_VARS DEC_FUNCS MAIN BODY END

    PROGRAM         shift and go to state 2

    PROGRAMA                       shift and go to state 1

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> PROGRAM . ID SEMICOLON DEC_VARS DEC_FUNCS MAIN BODY END

    ID              shift and go to state 3


state 3

    (1) PROGRAMA -> PROGRAM ID . SEMICOLON DEC_VARS DEC_FUNCS MAIN BODY END

    SEMICOLON       shift and go to state 4


state 4

    (1) PROGRAMA -> PROGRAM ID SEMICOLON . DEC_VARS DEC_FUNCS MAIN BODY END
    (2) DEC_VARS -> . epsilon
    (3) DEC_VARS -> . VARS
    (63) epsilon -> .
    (9) VARS -> . VAR LISTA_VAR

    VOID            reduce using rule 63 (epsilon -> .)
    MAIN            reduce using rule 63 (epsilon -> .)
    VAR             shift and go to state 8

    DEC_VARS                       shift and go to state 5
    epsilon                        shift and go to state 6
    VARS                           shift and go to state 7

state 5

    (1) PROGRAMA -> PROGRAM ID SEMICOLON DEC_VARS . DEC_FUNCS MAIN BODY END
    (7) DEC_FUNCS -> . epsilon
    (8) DEC_FUNCS -> . SOLO_FUNCS
    (63) epsilon -> .
    (4) SOLO_FUNCS -> . FUNCS MAS_FUNCS
    (18) FUNCS -> . VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON

    MAIN            reduce using rule 63 (epsilon -> .)
    VOID            shift and go to state 13

    DEC_FUNCS                      shift and go to state 9
    epsilon                        shift and go to state 10
    SOLO_FUNCS                     shift and go to state 11
    FUNCS                          shift and go to state 12

state 6

    (2) DEC_VARS -> epsilon .

    VOID            reduce using rule 2 (DEC_VARS -> epsilon .)
    MAIN            reduce using rule 2 (DEC_VARS -> epsilon .)


state 7

    (3) DEC_VARS -> VARS .

    VOID            reduce using rule 3 (DEC_VARS -> VARS .)
    MAIN            reduce using rule 3 (DEC_VARS -> VARS .)


state 8

    (9) VARS -> VAR . LISTA_VAR
    (10) LISTA_VAR -> . LISTA_ID COLON TYPE SEMICOLON MAS_VAR
    (13) LISTA_ID -> . ID MAS_ID

    ID              shift and go to state 16

    LISTA_VAR                      shift and go to state 14
    LISTA_ID                       shift and go to state 15

state 9

    (1) PROGRAMA -> PROGRAM ID SEMICOLON DEC_VARS DEC_FUNCS . MAIN BODY END

    MAIN            shift and go to state 17


state 10

    (7) DEC_FUNCS -> epsilon .

    MAIN            reduce using rule 7 (DEC_FUNCS -> epsilon .)


state 11

    (8) DEC_FUNCS -> SOLO_FUNCS .

    MAIN            reduce using rule 8 (DEC_FUNCS -> SOLO_FUNCS .)


state 12

    (4) SOLO_FUNCS -> FUNCS . MAS_FUNCS
    (5) MAS_FUNCS -> . epsilon
    (6) MAS_FUNCS -> . SOLO_FUNCS
    (63) epsilon -> .
    (4) SOLO_FUNCS -> . FUNCS MAS_FUNCS
    (18) FUNCS -> . VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON

    MAIN            reduce using rule 63 (epsilon -> .)
    VOID            shift and go to state 13

    FUNCS                          shift and go to state 12
    MAS_FUNCS                      shift and go to state 18
    epsilon                        shift and go to state 19
    SOLO_FUNCS                     shift and go to state 20

state 13

    (18) FUNCS -> VOID . ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON

    ID              shift and go to state 21


state 14

    (9) VARS -> VAR LISTA_VAR .

    VOID            reduce using rule 9 (VARS -> VAR LISTA_VAR .)
    MAIN            reduce using rule 9 (VARS -> VAR LISTA_VAR .)
    LEFT_BRACE      reduce using rule 9 (VARS -> VAR LISTA_VAR .)


state 15

    (10) LISTA_VAR -> LISTA_ID . COLON TYPE SEMICOLON MAS_VAR

    COLON           shift and go to state 22


state 16

    (13) LISTA_ID -> ID . MAS_ID
    (14) MAS_ID -> . COMMA LISTA_ID
    (15) MAS_ID -> . epsilon
    (63) epsilon -> .

    COMMA           shift and go to state 24
    COLON           reduce using rule 63 (epsilon -> .)

    MAS_ID                         shift and go to state 23
    epsilon                        shift and go to state 25

state 17

    (1) PROGRAMA -> PROGRAM ID SEMICOLON DEC_VARS DEC_FUNCS MAIN . BODY END
    (26) BODY -> . LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE

    LEFT_BRACE      shift and go to state 27

    BODY                           shift and go to state 26

state 18

    (4) SOLO_FUNCS -> FUNCS MAS_FUNCS .

    MAIN            reduce using rule 4 (SOLO_FUNCS -> FUNCS MAS_FUNCS .)


state 19

    (5) MAS_FUNCS -> epsilon .

    MAIN            reduce using rule 5 (MAS_FUNCS -> epsilon .)


state 20

    (6) MAS_FUNCS -> SOLO_FUNCS .

    MAIN            reduce using rule 6 (MAS_FUNCS -> SOLO_FUNCS .)


state 21

    (18) FUNCS -> VOID ID . LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON

    LEFT_PARENTHESIS shift and go to state 28


state 22

    (10) LISTA_VAR -> LISTA_ID COLON . TYPE SEMICOLON MAS_VAR
    (16) TYPE -> . INT
    (17) TYPE -> . FLOAT

    INT             shift and go to state 30
    FLOAT           shift and go to state 31

    TYPE                           shift and go to state 29

state 23

    (13) LISTA_ID -> ID MAS_ID .

    COLON           reduce using rule 13 (LISTA_ID -> ID MAS_ID .)


state 24

    (14) MAS_ID -> COMMA . LISTA_ID
    (13) LISTA_ID -> . ID MAS_ID

    ID              shift and go to state 16

    LISTA_ID                       shift and go to state 32

state 25

    (15) MAS_ID -> epsilon .

    COLON           reduce using rule 15 (MAS_ID -> epsilon .)


state 26

    (1) PROGRAMA -> PROGRAM ID SEMICOLON DEC_VARS DEC_FUNCS MAIN BODY . END

    END             shift and go to state 33


state 27

    (26) BODY -> LEFT_BRACE . DEC_STATEMENTS RIGHT_BRACE
    (27) DEC_STATEMENTS -> . epsilon
    (28) DEC_STATEMENTS -> . LISTA_STATEMENTS
    (63) epsilon -> .
    (29) LISTA_STATEMENTS -> . STATEMENT MAS_STATEMENTS
    (32) STATEMENT -> . ASSIGN
    (33) STATEMENT -> . CONDITION
    (34) ASSIGN -> . ID EQUAL EXPRESION SEMICOLON
    (60) CONDITION -> . IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITION

    RIGHT_BRACE     reduce using rule 63 (epsilon -> .)
    ID              shift and go to state 40
    IF              shift and go to state 41

    DEC_STATEMENTS                 shift and go to state 34
    epsilon                        shift and go to state 35
    LISTA_STATEMENTS               shift and go to state 36
    STATEMENT                      shift and go to state 37
    ASSIGN                         shift and go to state 38
    CONDITION                      shift and go to state 39

state 28

    (18) FUNCS -> VOID ID LEFT_PARENTHESIS . PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON
    (19) PARAMETROS -> . epsilon
    (20) PARAMETROS -> . DEC_PARAMETROS
    (63) epsilon -> .
    (21) DEC_PARAMETROS -> . ID COLON TYPE LISTA_PARAMETROS

    RIGHT_PARENTHESIS reduce using rule 63 (epsilon -> .)
    ID              shift and go to state 42

    PARAMETROS                     shift and go to state 43
    epsilon                        shift and go to state 44
    DEC_PARAMETROS                 shift and go to state 45

state 29

    (10) LISTA_VAR -> LISTA_ID COLON TYPE . SEMICOLON MAS_VAR

    SEMICOLON       shift and go to state 46


state 30

    (16) TYPE -> INT .

    SEMICOLON       reduce using rule 16 (TYPE -> INT .)
    COMMA           reduce using rule 16 (TYPE -> INT .)
    RIGHT_PARENTHESIS reduce using rule 16 (TYPE -> INT .)


state 31

    (17) TYPE -> FLOAT .

    SEMICOLON       reduce using rule 17 (TYPE -> FLOAT .)
    COMMA           reduce using rule 17 (TYPE -> FLOAT .)
    RIGHT_PARENTHESIS reduce using rule 17 (TYPE -> FLOAT .)


state 32

    (14) MAS_ID -> COMMA LISTA_ID .

    COLON           reduce using rule 14 (MAS_ID -> COMMA LISTA_ID .)


state 33

    (1) PROGRAMA -> PROGRAM ID SEMICOLON DEC_VARS DEC_FUNCS MAIN BODY END .

    $end            reduce using rule 1 (PROGRAMA -> PROGRAM ID SEMICOLON DEC_VARS DEC_FUNCS MAIN BODY END .)


state 34

    (26) BODY -> LEFT_BRACE DEC_STATEMENTS . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 47


state 35

    (27) DEC_STATEMENTS -> epsilon .

    RIGHT_BRACE     reduce using rule 27 (DEC_STATEMENTS -> epsilon .)


state 36

    (28) DEC_STATEMENTS -> LISTA_STATEMENTS .

    RIGHT_BRACE     reduce using rule 28 (DEC_STATEMENTS -> LISTA_STATEMENTS .)


state 37

    (29) LISTA_STATEMENTS -> STATEMENT . MAS_STATEMENTS
    (30) MAS_STATEMENTS -> . epsilon
    (31) MAS_STATEMENTS -> . LISTA_STATEMENTS
    (63) epsilon -> .
    (29) LISTA_STATEMENTS -> . STATEMENT MAS_STATEMENTS
    (32) STATEMENT -> . ASSIGN
    (33) STATEMENT -> . CONDITION
    (34) ASSIGN -> . ID EQUAL EXPRESION SEMICOLON
    (60) CONDITION -> . IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITION

    RIGHT_BRACE     reduce using rule 63 (epsilon -> .)
    ID              shift and go to state 40
    IF              shift and go to state 41

    STATEMENT                      shift and go to state 37
    MAS_STATEMENTS                 shift and go to state 48
    epsilon                        shift and go to state 49
    LISTA_STATEMENTS               shift and go to state 50
    ASSIGN                         shift and go to state 38
    CONDITION                      shift and go to state 39

state 38

    (32) STATEMENT -> ASSIGN .

    ID              reduce using rule 32 (STATEMENT -> ASSIGN .)
    IF              reduce using rule 32 (STATEMENT -> ASSIGN .)
    RIGHT_BRACE     reduce using rule 32 (STATEMENT -> ASSIGN .)


state 39

    (33) STATEMENT -> CONDITION .

    ID              reduce using rule 33 (STATEMENT -> CONDITION .)
    IF              reduce using rule 33 (STATEMENT -> CONDITION .)
    RIGHT_BRACE     reduce using rule 33 (STATEMENT -> CONDITION .)


state 40

    (34) ASSIGN -> ID . EQUAL EXPRESION SEMICOLON

    EQUAL           shift and go to state 51


state 41

    (60) CONDITION -> IF . LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITION

    LEFT_PARENTHESIS shift and go to state 52


state 42

    (21) DEC_PARAMETROS -> ID . COLON TYPE LISTA_PARAMETROS

    COLON           shift and go to state 53


state 43

    (18) FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS . RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 54


state 44

    (19) PARAMETROS -> epsilon .

    RIGHT_PARENTHESIS reduce using rule 19 (PARAMETROS -> epsilon .)


state 45

    (20) PARAMETROS -> DEC_PARAMETROS .

    RIGHT_PARENTHESIS reduce using rule 20 (PARAMETROS -> DEC_PARAMETROS .)


state 46

    (10) LISTA_VAR -> LISTA_ID COLON TYPE SEMICOLON . MAS_VAR
    (11) MAS_VAR -> . epsilon
    (12) MAS_VAR -> . LISTA_VAR
    (63) epsilon -> .
    (10) LISTA_VAR -> . LISTA_ID COLON TYPE SEMICOLON MAS_VAR
    (13) LISTA_ID -> . ID MAS_ID

    VOID            reduce using rule 63 (epsilon -> .)
    MAIN            reduce using rule 63 (epsilon -> .)
    LEFT_BRACE      reduce using rule 63 (epsilon -> .)
    ID              shift and go to state 16

    LISTA_ID                       shift and go to state 15
    MAS_VAR                        shift and go to state 55
    epsilon                        shift and go to state 56
    LISTA_VAR                      shift and go to state 57

state 47

    (26) BODY -> LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE .

    END             reduce using rule 26 (BODY -> LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE .)
    ELSE            reduce using rule 26 (BODY -> LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE .)
    ID              reduce using rule 26 (BODY -> LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE .)
    IF              reduce using rule 26 (BODY -> LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 26 (BODY -> LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE .)
    RIGHT_BRACKET   reduce using rule 26 (BODY -> LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE .)


state 48

    (29) LISTA_STATEMENTS -> STATEMENT MAS_STATEMENTS .

    RIGHT_BRACE     reduce using rule 29 (LISTA_STATEMENTS -> STATEMENT MAS_STATEMENTS .)


state 49

    (30) MAS_STATEMENTS -> epsilon .

    RIGHT_BRACE     reduce using rule 30 (MAS_STATEMENTS -> epsilon .)


state 50

    (31) MAS_STATEMENTS -> LISTA_STATEMENTS .

    RIGHT_BRACE     reduce using rule 31 (MAS_STATEMENTS -> LISTA_STATEMENTS .)


state 51

    (34) ASSIGN -> ID EQUAL . EXPRESION SEMICOLON
    (35) EXPRESION -> . EXP MAS_EXPRESIONES
    (41) EXP -> . TERMINO MAS_EXP
    (46) TERMINO -> . FACTOR MAS_TERMINO
    (51) FACTOR -> . OPERADORES_FACTOR ID_CTE
    (52) FACTOR -> . LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS
    (55) OPERADORES_FACTOR -> . PLUS
    (56) OPERADORES_FACTOR -> . MINUS
    (57) OPERADORES_FACTOR -> . epsilon
    (63) epsilon -> .

    LEFT_PARENTHESIS shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    ID              reduce using rule 63 (epsilon -> .)
    CTE_INT         reduce using rule 63 (epsilon -> .)
    CTE_FLOAT       reduce using rule 63 (epsilon -> .)

    EXPRESION                      shift and go to state 58
    EXP                            shift and go to state 59
    TERMINO                        shift and go to state 60
    FACTOR                         shift and go to state 61
    OPERADORES_FACTOR              shift and go to state 62
    epsilon                        shift and go to state 66

state 52

    (60) CONDITION -> IF LEFT_PARENTHESIS . EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITION
    (35) EXPRESION -> . EXP MAS_EXPRESIONES
    (41) EXP -> . TERMINO MAS_EXP
    (46) TERMINO -> . FACTOR MAS_TERMINO
    (51) FACTOR -> . OPERADORES_FACTOR ID_CTE
    (52) FACTOR -> . LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS
    (55) OPERADORES_FACTOR -> . PLUS
    (56) OPERADORES_FACTOR -> . MINUS
    (57) OPERADORES_FACTOR -> . epsilon
    (63) epsilon -> .

    LEFT_PARENTHESIS shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    ID              reduce using rule 63 (epsilon -> .)
    CTE_INT         reduce using rule 63 (epsilon -> .)
    CTE_FLOAT       reduce using rule 63 (epsilon -> .)

    EXPRESION                      shift and go to state 67
    EXP                            shift and go to state 59
    TERMINO                        shift and go to state 60
    FACTOR                         shift and go to state 61
    OPERADORES_FACTOR              shift and go to state 62
    epsilon                        shift and go to state 66

state 53

    (21) DEC_PARAMETROS -> ID COLON . TYPE LISTA_PARAMETROS
    (16) TYPE -> . INT
    (17) TYPE -> . FLOAT

    INT             shift and go to state 30
    FLOAT           shift and go to state 31

    TYPE                           shift and go to state 68

state 54

    (18) FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS . LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON

    LEFT_BRACKET    shift and go to state 69


state 55

    (10) LISTA_VAR -> LISTA_ID COLON TYPE SEMICOLON MAS_VAR .

    VOID            reduce using rule 10 (LISTA_VAR -> LISTA_ID COLON TYPE SEMICOLON MAS_VAR .)
    MAIN            reduce using rule 10 (LISTA_VAR -> LISTA_ID COLON TYPE SEMICOLON MAS_VAR .)
    LEFT_BRACE      reduce using rule 10 (LISTA_VAR -> LISTA_ID COLON TYPE SEMICOLON MAS_VAR .)


state 56

    (11) MAS_VAR -> epsilon .

    VOID            reduce using rule 11 (MAS_VAR -> epsilon .)
    MAIN            reduce using rule 11 (MAS_VAR -> epsilon .)
    LEFT_BRACE      reduce using rule 11 (MAS_VAR -> epsilon .)


state 57

    (12) MAS_VAR -> LISTA_VAR .

    VOID            reduce using rule 12 (MAS_VAR -> LISTA_VAR .)
    MAIN            reduce using rule 12 (MAS_VAR -> LISTA_VAR .)
    LEFT_BRACE      reduce using rule 12 (MAS_VAR -> LISTA_VAR .)


state 58

    (34) ASSIGN -> ID EQUAL EXPRESION . SEMICOLON

    SEMICOLON       shift and go to state 70


state 59

    (35) EXPRESION -> EXP . MAS_EXPRESIONES
    (36) MAS_EXPRESIONES -> . epsilon
    (37) MAS_EXPRESIONES -> . OPERADORES EXP
    (63) epsilon -> .
    (38) OPERADORES -> . GREATER_THAN
    (39) OPERADORES -> . LESS_THAN
    (40) OPERADORES -> . NOT_EQUAL

    SEMICOLON       reduce using rule 63 (epsilon -> .)
    RIGHT_PARENTHESIS reduce using rule 63 (epsilon -> .)
    GREATER_THAN    shift and go to state 74
    LESS_THAN       shift and go to state 75
    NOT_EQUAL       shift and go to state 76

    MAS_EXPRESIONES                shift and go to state 71
    epsilon                        shift and go to state 72
    OPERADORES                     shift and go to state 73

state 60

    (41) EXP -> TERMINO . MAS_EXP
    (42) MAS_EXP -> . OPERADORES_EXP EXP
    (43) MAS_EXP -> . epsilon
    (44) OPERADORES_EXP -> . PLUS
    (45) OPERADORES_EXP -> . MINUS
    (63) epsilon -> .

    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    GREATER_THAN    reduce using rule 63 (epsilon -> .)
    LESS_THAN       reduce using rule 63 (epsilon -> .)
    NOT_EQUAL       reduce using rule 63 (epsilon -> .)
    SEMICOLON       reduce using rule 63 (epsilon -> .)
    RIGHT_PARENTHESIS reduce using rule 63 (epsilon -> .)

    MAS_EXP                        shift and go to state 77
    OPERADORES_EXP                 shift and go to state 78
    epsilon                        shift and go to state 79

state 61

    (46) TERMINO -> FACTOR . MAS_TERMINO
    (47) MAS_TERMINO -> . epsilon
    (48) MAS_TERMINO -> . OPERADORES_TER TERMINO
    (63) epsilon -> .
    (49) OPERADORES_TER -> . MULTIPLICATION
    (50) OPERADORES_TER -> . DIVISION

    PLUS            reduce using rule 63 (epsilon -> .)
    MINUS           reduce using rule 63 (epsilon -> .)
    GREATER_THAN    reduce using rule 63 (epsilon -> .)
    LESS_THAN       reduce using rule 63 (epsilon -> .)
    NOT_EQUAL       reduce using rule 63 (epsilon -> .)
    SEMICOLON       reduce using rule 63 (epsilon -> .)
    RIGHT_PARENTHESIS reduce using rule 63 (epsilon -> .)
    MULTIPLICATION  shift and go to state 85
    DIVISION        shift and go to state 86

    MAS_TERMINO                    shift and go to state 82
    epsilon                        shift and go to state 83
    OPERADORES_TER                 shift and go to state 84

state 62

    (51) FACTOR -> OPERADORES_FACTOR . ID_CTE
    (53) ID_CTE -> . ID
    (54) ID_CTE -> . CTE
    (58) CTE -> . CTE_INT
    (59) CTE -> . CTE_FLOAT

    ID              shift and go to state 88
    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91

    ID_CTE                         shift and go to state 87
    CTE                            shift and go to state 89

state 63

    (52) FACTOR -> LEFT_PARENTHESIS . EXPRESION RIGHT_PARENTHESIS
    (35) EXPRESION -> . EXP MAS_EXPRESIONES
    (41) EXP -> . TERMINO MAS_EXP
    (46) TERMINO -> . FACTOR MAS_TERMINO
    (51) FACTOR -> . OPERADORES_FACTOR ID_CTE
    (52) FACTOR -> . LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS
    (55) OPERADORES_FACTOR -> . PLUS
    (56) OPERADORES_FACTOR -> . MINUS
    (57) OPERADORES_FACTOR -> . epsilon
    (63) epsilon -> .

    LEFT_PARENTHESIS shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    ID              reduce using rule 63 (epsilon -> .)
    CTE_INT         reduce using rule 63 (epsilon -> .)
    CTE_FLOAT       reduce using rule 63 (epsilon -> .)

    EXPRESION                      shift and go to state 92
    EXP                            shift and go to state 59
    TERMINO                        shift and go to state 60
    FACTOR                         shift and go to state 61
    OPERADORES_FACTOR              shift and go to state 62
    epsilon                        shift and go to state 66

state 64

    (55) OPERADORES_FACTOR -> PLUS .

    ID              reduce using rule 55 (OPERADORES_FACTOR -> PLUS .)
    CTE_INT         reduce using rule 55 (OPERADORES_FACTOR -> PLUS .)
    CTE_FLOAT       reduce using rule 55 (OPERADORES_FACTOR -> PLUS .)


state 65

    (56) OPERADORES_FACTOR -> MINUS .

    ID              reduce using rule 56 (OPERADORES_FACTOR -> MINUS .)
    CTE_INT         reduce using rule 56 (OPERADORES_FACTOR -> MINUS .)
    CTE_FLOAT       reduce using rule 56 (OPERADORES_FACTOR -> MINUS .)


state 66

    (57) OPERADORES_FACTOR -> epsilon .

    ID              reduce using rule 57 (OPERADORES_FACTOR -> epsilon .)
    CTE_INT         reduce using rule 57 (OPERADORES_FACTOR -> epsilon .)
    CTE_FLOAT       reduce using rule 57 (OPERADORES_FACTOR -> epsilon .)


state 67

    (60) CONDITION -> IF LEFT_PARENTHESIS EXPRESION . RIGHT_PARENTHESIS BODY ELSE_CONDITION

    RIGHT_PARENTHESIS shift and go to state 93


state 68

    (21) DEC_PARAMETROS -> ID COLON TYPE . LISTA_PARAMETROS
    (22) LISTA_PARAMETROS -> . epsilon
    (23) LISTA_PARAMETROS -> . COMMA DEC_PARAMETROS
    (63) epsilon -> .

    COMMA           shift and go to state 96
    RIGHT_PARENTHESIS reduce using rule 63 (epsilon -> .)

    LISTA_PARAMETROS               shift and go to state 94
    epsilon                        shift and go to state 95

state 69

    (18) FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET . VARS_FUNC BODY RIGHT_BRACKET SEMICOLON
    (24) VARS_FUNC -> . epsilon
    (25) VARS_FUNC -> . VARS
    (63) epsilon -> .
    (9) VARS -> . VAR LISTA_VAR

    LEFT_BRACE      reduce using rule 63 (epsilon -> .)
    VAR             shift and go to state 8

    VARS_FUNC                      shift and go to state 97
    epsilon                        shift and go to state 98
    VARS                           shift and go to state 99

state 70

    (34) ASSIGN -> ID EQUAL EXPRESION SEMICOLON .

    ID              reduce using rule 34 (ASSIGN -> ID EQUAL EXPRESION SEMICOLON .)
    IF              reduce using rule 34 (ASSIGN -> ID EQUAL EXPRESION SEMICOLON .)
    RIGHT_BRACE     reduce using rule 34 (ASSIGN -> ID EQUAL EXPRESION SEMICOLON .)


state 71

    (35) EXPRESION -> EXP MAS_EXPRESIONES .

    SEMICOLON       reduce using rule 35 (EXPRESION -> EXP MAS_EXPRESIONES .)
    RIGHT_PARENTHESIS reduce using rule 35 (EXPRESION -> EXP MAS_EXPRESIONES .)


state 72

    (36) MAS_EXPRESIONES -> epsilon .

    SEMICOLON       reduce using rule 36 (MAS_EXPRESIONES -> epsilon .)
    RIGHT_PARENTHESIS reduce using rule 36 (MAS_EXPRESIONES -> epsilon .)


state 73

    (37) MAS_EXPRESIONES -> OPERADORES . EXP
    (41) EXP -> . TERMINO MAS_EXP
    (46) TERMINO -> . FACTOR MAS_TERMINO
    (51) FACTOR -> . OPERADORES_FACTOR ID_CTE
    (52) FACTOR -> . LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS
    (55) OPERADORES_FACTOR -> . PLUS
    (56) OPERADORES_FACTOR -> . MINUS
    (57) OPERADORES_FACTOR -> . epsilon
    (63) epsilon -> .

    LEFT_PARENTHESIS shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    ID              reduce using rule 63 (epsilon -> .)
    CTE_INT         reduce using rule 63 (epsilon -> .)
    CTE_FLOAT       reduce using rule 63 (epsilon -> .)

    EXP                            shift and go to state 100
    TERMINO                        shift and go to state 60
    FACTOR                         shift and go to state 61
    OPERADORES_FACTOR              shift and go to state 62
    epsilon                        shift and go to state 66

state 74

    (38) OPERADORES -> GREATER_THAN .

    LEFT_PARENTHESIS reduce using rule 38 (OPERADORES -> GREATER_THAN .)
    PLUS            reduce using rule 38 (OPERADORES -> GREATER_THAN .)
    MINUS           reduce using rule 38 (OPERADORES -> GREATER_THAN .)
    ID              reduce using rule 38 (OPERADORES -> GREATER_THAN .)
    CTE_INT         reduce using rule 38 (OPERADORES -> GREATER_THAN .)
    CTE_FLOAT       reduce using rule 38 (OPERADORES -> GREATER_THAN .)


state 75

    (39) OPERADORES -> LESS_THAN .

    LEFT_PARENTHESIS reduce using rule 39 (OPERADORES -> LESS_THAN .)
    PLUS            reduce using rule 39 (OPERADORES -> LESS_THAN .)
    MINUS           reduce using rule 39 (OPERADORES -> LESS_THAN .)
    ID              reduce using rule 39 (OPERADORES -> LESS_THAN .)
    CTE_INT         reduce using rule 39 (OPERADORES -> LESS_THAN .)
    CTE_FLOAT       reduce using rule 39 (OPERADORES -> LESS_THAN .)


state 76

    (40) OPERADORES -> NOT_EQUAL .

    LEFT_PARENTHESIS reduce using rule 40 (OPERADORES -> NOT_EQUAL .)
    PLUS            reduce using rule 40 (OPERADORES -> NOT_EQUAL .)
    MINUS           reduce using rule 40 (OPERADORES -> NOT_EQUAL .)
    ID              reduce using rule 40 (OPERADORES -> NOT_EQUAL .)
    CTE_INT         reduce using rule 40 (OPERADORES -> NOT_EQUAL .)
    CTE_FLOAT       reduce using rule 40 (OPERADORES -> NOT_EQUAL .)


state 77

    (41) EXP -> TERMINO MAS_EXP .

    GREATER_THAN    reduce using rule 41 (EXP -> TERMINO MAS_EXP .)
    LESS_THAN       reduce using rule 41 (EXP -> TERMINO MAS_EXP .)
    NOT_EQUAL       reduce using rule 41 (EXP -> TERMINO MAS_EXP .)
    SEMICOLON       reduce using rule 41 (EXP -> TERMINO MAS_EXP .)
    RIGHT_PARENTHESIS reduce using rule 41 (EXP -> TERMINO MAS_EXP .)


state 78

    (42) MAS_EXP -> OPERADORES_EXP . EXP
    (41) EXP -> . TERMINO MAS_EXP
    (46) TERMINO -> . FACTOR MAS_TERMINO
    (51) FACTOR -> . OPERADORES_FACTOR ID_CTE
    (52) FACTOR -> . LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS
    (55) OPERADORES_FACTOR -> . PLUS
    (56) OPERADORES_FACTOR -> . MINUS
    (57) OPERADORES_FACTOR -> . epsilon
    (63) epsilon -> .

    LEFT_PARENTHESIS shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    ID              reduce using rule 63 (epsilon -> .)
    CTE_INT         reduce using rule 63 (epsilon -> .)
    CTE_FLOAT       reduce using rule 63 (epsilon -> .)

    EXP                            shift and go to state 101
    TERMINO                        shift and go to state 60
    FACTOR                         shift and go to state 61
    OPERADORES_FACTOR              shift and go to state 62
    epsilon                        shift and go to state 66

state 79

    (43) MAS_EXP -> epsilon .

    GREATER_THAN    reduce using rule 43 (MAS_EXP -> epsilon .)
    LESS_THAN       reduce using rule 43 (MAS_EXP -> epsilon .)
    NOT_EQUAL       reduce using rule 43 (MAS_EXP -> epsilon .)
    SEMICOLON       reduce using rule 43 (MAS_EXP -> epsilon .)
    RIGHT_PARENTHESIS reduce using rule 43 (MAS_EXP -> epsilon .)


state 80

    (44) OPERADORES_EXP -> PLUS .

    LEFT_PARENTHESIS reduce using rule 44 (OPERADORES_EXP -> PLUS .)
    PLUS            reduce using rule 44 (OPERADORES_EXP -> PLUS .)
    MINUS           reduce using rule 44 (OPERADORES_EXP -> PLUS .)
    ID              reduce using rule 44 (OPERADORES_EXP -> PLUS .)
    CTE_INT         reduce using rule 44 (OPERADORES_EXP -> PLUS .)
    CTE_FLOAT       reduce using rule 44 (OPERADORES_EXP -> PLUS .)


state 81

    (45) OPERADORES_EXP -> MINUS .

    LEFT_PARENTHESIS reduce using rule 45 (OPERADORES_EXP -> MINUS .)
    PLUS            reduce using rule 45 (OPERADORES_EXP -> MINUS .)
    MINUS           reduce using rule 45 (OPERADORES_EXP -> MINUS .)
    ID              reduce using rule 45 (OPERADORES_EXP -> MINUS .)
    CTE_INT         reduce using rule 45 (OPERADORES_EXP -> MINUS .)
    CTE_FLOAT       reduce using rule 45 (OPERADORES_EXP -> MINUS .)


state 82

    (46) TERMINO -> FACTOR MAS_TERMINO .

    PLUS            reduce using rule 46 (TERMINO -> FACTOR MAS_TERMINO .)
    MINUS           reduce using rule 46 (TERMINO -> FACTOR MAS_TERMINO .)
    GREATER_THAN    reduce using rule 46 (TERMINO -> FACTOR MAS_TERMINO .)
    LESS_THAN       reduce using rule 46 (TERMINO -> FACTOR MAS_TERMINO .)
    NOT_EQUAL       reduce using rule 46 (TERMINO -> FACTOR MAS_TERMINO .)
    SEMICOLON       reduce using rule 46 (TERMINO -> FACTOR MAS_TERMINO .)
    RIGHT_PARENTHESIS reduce using rule 46 (TERMINO -> FACTOR MAS_TERMINO .)


state 83

    (47) MAS_TERMINO -> epsilon .

    PLUS            reduce using rule 47 (MAS_TERMINO -> epsilon .)
    MINUS           reduce using rule 47 (MAS_TERMINO -> epsilon .)
    GREATER_THAN    reduce using rule 47 (MAS_TERMINO -> epsilon .)
    LESS_THAN       reduce using rule 47 (MAS_TERMINO -> epsilon .)
    NOT_EQUAL       reduce using rule 47 (MAS_TERMINO -> epsilon .)
    SEMICOLON       reduce using rule 47 (MAS_TERMINO -> epsilon .)
    RIGHT_PARENTHESIS reduce using rule 47 (MAS_TERMINO -> epsilon .)


state 84

    (48) MAS_TERMINO -> OPERADORES_TER . TERMINO
    (46) TERMINO -> . FACTOR MAS_TERMINO
    (51) FACTOR -> . OPERADORES_FACTOR ID_CTE
    (52) FACTOR -> . LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS
    (55) OPERADORES_FACTOR -> . PLUS
    (56) OPERADORES_FACTOR -> . MINUS
    (57) OPERADORES_FACTOR -> . epsilon
    (63) epsilon -> .

    LEFT_PARENTHESIS shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    ID              reduce using rule 63 (epsilon -> .)
    CTE_INT         reduce using rule 63 (epsilon -> .)
    CTE_FLOAT       reduce using rule 63 (epsilon -> .)

    TERMINO                        shift and go to state 102
    FACTOR                         shift and go to state 61
    OPERADORES_FACTOR              shift and go to state 62
    epsilon                        shift and go to state 66

state 85

    (49) OPERADORES_TER -> MULTIPLICATION .

    LEFT_PARENTHESIS reduce using rule 49 (OPERADORES_TER -> MULTIPLICATION .)
    PLUS            reduce using rule 49 (OPERADORES_TER -> MULTIPLICATION .)
    MINUS           reduce using rule 49 (OPERADORES_TER -> MULTIPLICATION .)
    ID              reduce using rule 49 (OPERADORES_TER -> MULTIPLICATION .)
    CTE_INT         reduce using rule 49 (OPERADORES_TER -> MULTIPLICATION .)
    CTE_FLOAT       reduce using rule 49 (OPERADORES_TER -> MULTIPLICATION .)


state 86

    (50) OPERADORES_TER -> DIVISION .

    LEFT_PARENTHESIS reduce using rule 50 (OPERADORES_TER -> DIVISION .)
    PLUS            reduce using rule 50 (OPERADORES_TER -> DIVISION .)
    MINUS           reduce using rule 50 (OPERADORES_TER -> DIVISION .)
    ID              reduce using rule 50 (OPERADORES_TER -> DIVISION .)
    CTE_INT         reduce using rule 50 (OPERADORES_TER -> DIVISION .)
    CTE_FLOAT       reduce using rule 50 (OPERADORES_TER -> DIVISION .)


state 87

    (51) FACTOR -> OPERADORES_FACTOR ID_CTE .

    MULTIPLICATION  reduce using rule 51 (FACTOR -> OPERADORES_FACTOR ID_CTE .)
    DIVISION        reduce using rule 51 (FACTOR -> OPERADORES_FACTOR ID_CTE .)
    PLUS            reduce using rule 51 (FACTOR -> OPERADORES_FACTOR ID_CTE .)
    MINUS           reduce using rule 51 (FACTOR -> OPERADORES_FACTOR ID_CTE .)
    GREATER_THAN    reduce using rule 51 (FACTOR -> OPERADORES_FACTOR ID_CTE .)
    LESS_THAN       reduce using rule 51 (FACTOR -> OPERADORES_FACTOR ID_CTE .)
    NOT_EQUAL       reduce using rule 51 (FACTOR -> OPERADORES_FACTOR ID_CTE .)
    SEMICOLON       reduce using rule 51 (FACTOR -> OPERADORES_FACTOR ID_CTE .)
    RIGHT_PARENTHESIS reduce using rule 51 (FACTOR -> OPERADORES_FACTOR ID_CTE .)


state 88

    (53) ID_CTE -> ID .

    MULTIPLICATION  reduce using rule 53 (ID_CTE -> ID .)
    DIVISION        reduce using rule 53 (ID_CTE -> ID .)
    PLUS            reduce using rule 53 (ID_CTE -> ID .)
    MINUS           reduce using rule 53 (ID_CTE -> ID .)
    GREATER_THAN    reduce using rule 53 (ID_CTE -> ID .)
    LESS_THAN       reduce using rule 53 (ID_CTE -> ID .)
    NOT_EQUAL       reduce using rule 53 (ID_CTE -> ID .)
    SEMICOLON       reduce using rule 53 (ID_CTE -> ID .)
    RIGHT_PARENTHESIS reduce using rule 53 (ID_CTE -> ID .)


state 89

    (54) ID_CTE -> CTE .

    MULTIPLICATION  reduce using rule 54 (ID_CTE -> CTE .)
    DIVISION        reduce using rule 54 (ID_CTE -> CTE .)
    PLUS            reduce using rule 54 (ID_CTE -> CTE .)
    MINUS           reduce using rule 54 (ID_CTE -> CTE .)
    GREATER_THAN    reduce using rule 54 (ID_CTE -> CTE .)
    LESS_THAN       reduce using rule 54 (ID_CTE -> CTE .)
    NOT_EQUAL       reduce using rule 54 (ID_CTE -> CTE .)
    SEMICOLON       reduce using rule 54 (ID_CTE -> CTE .)
    RIGHT_PARENTHESIS reduce using rule 54 (ID_CTE -> CTE .)


state 90

    (58) CTE -> CTE_INT .

    MULTIPLICATION  reduce using rule 58 (CTE -> CTE_INT .)
    DIVISION        reduce using rule 58 (CTE -> CTE_INT .)
    PLUS            reduce using rule 58 (CTE -> CTE_INT .)
    MINUS           reduce using rule 58 (CTE -> CTE_INT .)
    GREATER_THAN    reduce using rule 58 (CTE -> CTE_INT .)
    LESS_THAN       reduce using rule 58 (CTE -> CTE_INT .)
    NOT_EQUAL       reduce using rule 58 (CTE -> CTE_INT .)
    SEMICOLON       reduce using rule 58 (CTE -> CTE_INT .)
    RIGHT_PARENTHESIS reduce using rule 58 (CTE -> CTE_INT .)


state 91

    (59) CTE -> CTE_FLOAT .

    MULTIPLICATION  reduce using rule 59 (CTE -> CTE_FLOAT .)
    DIVISION        reduce using rule 59 (CTE -> CTE_FLOAT .)
    PLUS            reduce using rule 59 (CTE -> CTE_FLOAT .)
    MINUS           reduce using rule 59 (CTE -> CTE_FLOAT .)
    GREATER_THAN    reduce using rule 59 (CTE -> CTE_FLOAT .)
    LESS_THAN       reduce using rule 59 (CTE -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 59 (CTE -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 59 (CTE -> CTE_FLOAT .)
    RIGHT_PARENTHESIS reduce using rule 59 (CTE -> CTE_FLOAT .)


state 92

    (52) FACTOR -> LEFT_PARENTHESIS EXPRESION . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 103


state 93

    (60) CONDITION -> IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS . BODY ELSE_CONDITION
    (26) BODY -> . LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE

    LEFT_BRACE      shift and go to state 27

    BODY                           shift and go to state 104

state 94

    (21) DEC_PARAMETROS -> ID COLON TYPE LISTA_PARAMETROS .

    RIGHT_PARENTHESIS reduce using rule 21 (DEC_PARAMETROS -> ID COLON TYPE LISTA_PARAMETROS .)


state 95

    (22) LISTA_PARAMETROS -> epsilon .

    RIGHT_PARENTHESIS reduce using rule 22 (LISTA_PARAMETROS -> epsilon .)


state 96

    (23) LISTA_PARAMETROS -> COMMA . DEC_PARAMETROS
    (21) DEC_PARAMETROS -> . ID COLON TYPE LISTA_PARAMETROS

    ID              shift and go to state 42

    DEC_PARAMETROS                 shift and go to state 105

state 97

    (18) FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC . BODY RIGHT_BRACKET SEMICOLON
    (26) BODY -> . LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE

    LEFT_BRACE      shift and go to state 27

    BODY                           shift and go to state 106

state 98

    (24) VARS_FUNC -> epsilon .

    LEFT_BRACE      reduce using rule 24 (VARS_FUNC -> epsilon .)


state 99

    (25) VARS_FUNC -> VARS .

    LEFT_BRACE      reduce using rule 25 (VARS_FUNC -> VARS .)


state 100

    (37) MAS_EXPRESIONES -> OPERADORES EXP .

    SEMICOLON       reduce using rule 37 (MAS_EXPRESIONES -> OPERADORES EXP .)
    RIGHT_PARENTHESIS reduce using rule 37 (MAS_EXPRESIONES -> OPERADORES EXP .)


state 101

    (42) MAS_EXP -> OPERADORES_EXP EXP .

    GREATER_THAN    reduce using rule 42 (MAS_EXP -> OPERADORES_EXP EXP .)
    LESS_THAN       reduce using rule 42 (MAS_EXP -> OPERADORES_EXP EXP .)
    NOT_EQUAL       reduce using rule 42 (MAS_EXP -> OPERADORES_EXP EXP .)
    SEMICOLON       reduce using rule 42 (MAS_EXP -> OPERADORES_EXP EXP .)
    RIGHT_PARENTHESIS reduce using rule 42 (MAS_EXP -> OPERADORES_EXP EXP .)


state 102

    (48) MAS_TERMINO -> OPERADORES_TER TERMINO .

    PLUS            reduce using rule 48 (MAS_TERMINO -> OPERADORES_TER TERMINO .)
    MINUS           reduce using rule 48 (MAS_TERMINO -> OPERADORES_TER TERMINO .)
    GREATER_THAN    reduce using rule 48 (MAS_TERMINO -> OPERADORES_TER TERMINO .)
    LESS_THAN       reduce using rule 48 (MAS_TERMINO -> OPERADORES_TER TERMINO .)
    NOT_EQUAL       reduce using rule 48 (MAS_TERMINO -> OPERADORES_TER TERMINO .)
    SEMICOLON       reduce using rule 48 (MAS_TERMINO -> OPERADORES_TER TERMINO .)
    RIGHT_PARENTHESIS reduce using rule 48 (MAS_TERMINO -> OPERADORES_TER TERMINO .)


state 103

    (52) FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS .

    MULTIPLICATION  reduce using rule 52 (FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS .)
    DIVISION        reduce using rule 52 (FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 52 (FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 52 (FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS .)
    GREATER_THAN    reduce using rule 52 (FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 52 (FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 52 (FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 52 (FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 52 (FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS .)


state 104

    (60) CONDITION -> IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY . ELSE_CONDITION
    (61) ELSE_CONDITION -> . epsilon
    (62) ELSE_CONDITION -> . ELSE BODY
    (63) epsilon -> .

    ELSE            shift and go to state 109
    ID              reduce using rule 63 (epsilon -> .)
    IF              reduce using rule 63 (epsilon -> .)
    RIGHT_BRACE     reduce using rule 63 (epsilon -> .)

    ELSE_CONDITION                 shift and go to state 107
    epsilon                        shift and go to state 108

state 105

    (23) LISTA_PARAMETROS -> COMMA DEC_PARAMETROS .

    RIGHT_PARENTHESIS reduce using rule 23 (LISTA_PARAMETROS -> COMMA DEC_PARAMETROS .)


state 106

    (18) FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 110


state 107

    (60) CONDITION -> IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITION .

    ID              reduce using rule 60 (CONDITION -> IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITION .)
    IF              reduce using rule 60 (CONDITION -> IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITION .)
    RIGHT_BRACE     reduce using rule 60 (CONDITION -> IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITION .)


state 108

    (61) ELSE_CONDITION -> epsilon .

    ID              reduce using rule 61 (ELSE_CONDITION -> epsilon .)
    IF              reduce using rule 61 (ELSE_CONDITION -> epsilon .)
    RIGHT_BRACE     reduce using rule 61 (ELSE_CONDITION -> epsilon .)


state 109

    (62) ELSE_CONDITION -> ELSE . BODY
    (26) BODY -> . LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE

    LEFT_BRACE      shift and go to state 27

    BODY                           shift and go to state 111

state 110

    (18) FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 112


state 111

    (62) ELSE_CONDITION -> ELSE BODY .

    ID              reduce using rule 62 (ELSE_CONDITION -> ELSE BODY .)
    IF              reduce using rule 62 (ELSE_CONDITION -> ELSE BODY .)
    RIGHT_BRACE     reduce using rule 62 (ELSE_CONDITION -> ELSE BODY .)


state 112

    (18) FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON .

    VOID            reduce using rule 18 (FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON .)
    MAIN            reduce using rule 18 (FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON .)

