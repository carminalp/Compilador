Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CTE_STRING
    PRINT

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> PROGRAM ID SEMICOLON DEC_VARS DEC_FUNCS MAIN BODY END
Rule 2     DEC_VARS -> epsilon
Rule 3     DEC_VARS -> VARS
Rule 4     SOLO_FUNCS -> FUNCS MAS_FUNCS
Rule 5     MAS_FUNCS -> epsilon
Rule 6     MAS_FUNCS -> SOLO_FUNCS
Rule 7     DEC_FUNCS -> epsilon
Rule 8     DEC_FUNCS -> SOLO_FUNCS
Rule 9     VARS -> VAR LISTA_VAR
Rule 10    LISTA_VAR -> LISTA_ID COLON TYPE SEMICOLON MAS_VAR
Rule 11    MAS_VAR -> epsilon
Rule 12    MAS_VAR -> LISTA_VAR
Rule 13    LISTA_ID -> ID MAS_ID
Rule 14    MAS_ID -> COMMA LISTA_ID
Rule 15    MAS_ID -> epsilon
Rule 16    TYPE -> INT
Rule 17    TYPE -> FLOAT
Rule 18    FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON
Rule 19    PARAMETROS -> epsilon
Rule 20    PARAMETROS -> DEC_PARAMETROS
Rule 21    DEC_PARAMETROS -> ID COLON TYPE LISTA_PARAMETROS
Rule 22    LISTA_PARAMETROS -> epsilon
Rule 23    LISTA_PARAMETROS -> COMMA DEC_PARAMETROS
Rule 24    VARS_FUNC -> epsilon
Rule 25    VARS_FUNC -> VARS
Rule 26    BODY -> LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE
Rule 27    DEC_STATEMENTS -> epsilon
Rule 28    DEC_STATEMENTS -> LISTA_STATEMENTS
Rule 29    LISTA_STATEMENTS -> STATEMENT MAS_STATEMENTS
Rule 30    MAS_STATEMENTS -> epsilon
Rule 31    MAS_STATEMENTS -> LISTA_STATEMENTS
Rule 32    STATEMENT -> ASSIGN
Rule 33    STATEMENT -> CONDITION
Rule 34    STATEMENT -> CYCLE
Rule 35    STATEMENT -> F_CALL
Rule 36    ASSIGN -> ID EQUAL EXPRESION SEMICOLON
Rule 37    EXPRESION -> EXP MAS_EXPRESIONES
Rule 38    MAS_EXPRESIONES -> epsilon
Rule 39    MAS_EXPRESIONES -> OPERADORES EXP
Rule 40    OPERADORES -> GREATER_THAN
Rule 41    OPERADORES -> LESS_THAN
Rule 42    OPERADORES -> NOT_EQUAL
Rule 43    EXP -> TERMINO MAS_EXP
Rule 44    MAS_EXP -> OPERADORES_EXP EXP
Rule 45    MAS_EXP -> epsilon
Rule 46    OPERADORES_EXP -> PLUS
Rule 47    OPERADORES_EXP -> MINUS
Rule 48    TERMINO -> FACTOR MAS_TERMINO
Rule 49    MAS_TERMINO -> epsilon
Rule 50    MAS_TERMINO -> OPERADORES_TER TERMINO
Rule 51    OPERADORES_TER -> MULTIPLICATION
Rule 52    OPERADORES_TER -> DIVISION
Rule 53    FACTOR -> OPERADORES_FACTOR ID_CTE
Rule 54    FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS
Rule 55    ID_CTE -> ID
Rule 56    ID_CTE -> CTE
Rule 57    OPERADORES_FACTOR -> PLUS
Rule 58    OPERADORES_FACTOR -> MINUS
Rule 59    OPERADORES_FACTOR -> epsilon
Rule 60    CTE -> CTE_INT
Rule 61    CTE -> CTE_FLOAT
Rule 62    CONDITION -> IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITION
Rule 63    ELSE_CONDITION -> epsilon
Rule 64    ELSE_CONDITION -> ELSE BODY
Rule 65    CYCLE -> WHILE BODY DO LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS SEMICOLON
Rule 66    F_CALL -> ID LEFT_PARENTHESIS EXPRESIONES RIGHT_PARENTHESIS SEMICOLON
Rule 67    EXPRESIONES -> epsilon
Rule 68    EXPRESIONES -> EXPRESIONES_F
Rule 69    EXPRESIONES_F -> EXPRESION LISTA_EXP
Rule 70    LISTA_EXP -> epsilon
Rule 71    LISTA_EXP -> COMMA EXPRESIONES_F
Rule 72    epsilon -> <empty>

Terminals, with rules where they appear

COLON                : 10 21
COMMA                : 14 23 71
CTE_FLOAT            : 61
CTE_INT              : 60
CTE_STRING           : 
DIVISION             : 52
DO                   : 65
ELSE                 : 64
END                  : 1
EQUAL                : 36
FLOAT                : 17
GREATER_THAN         : 40
ID                   : 1 13 18 21 36 55 66
IF                   : 62
INT                  : 16
LEFT_BRACE           : 26
LEFT_BRACKET         : 18
LEFT_PARENTHESIS     : 18 54 62 65 66
LESS_THAN            : 41
MAIN                 : 1
MINUS                : 47 58
MULTIPLICATION       : 51
NOT_EQUAL            : 42
PLUS                 : 46 57
PRINT                : 
PROGRAM              : 1
RIGHT_BRACE          : 26
RIGHT_BRACKET        : 18
RIGHT_PARENTHESIS    : 18 54 62 65 66
SEMICOLON            : 1 10 18 36 65 66
VAR                  : 9
VOID                 : 18
WHILE                : 65
error                : 

Nonterminals, with rules where they appear

ASSIGN               : 32
BODY                 : 1 18 62 64 65
CONDITION            : 33
CTE                  : 56
CYCLE                : 34
DEC_FUNCS            : 1
DEC_PARAMETROS       : 20 23
DEC_STATEMENTS       : 26
DEC_VARS             : 1
ELSE_CONDITION       : 62
EXP                  : 37 39 44
EXPRESION            : 36 54 62 65 69
EXPRESIONES          : 66
EXPRESIONES_F        : 68 71
FACTOR               : 48
FUNCS                : 4
F_CALL               : 35
ID_CTE               : 53
LISTA_EXP            : 69
LISTA_ID             : 10 14
LISTA_PARAMETROS     : 21
LISTA_STATEMENTS     : 28 31
LISTA_VAR            : 9 12
MAS_EXP              : 43
MAS_EXPRESIONES      : 37
MAS_FUNCS            : 4
MAS_ID               : 13
MAS_STATEMENTS       : 29
MAS_TERMINO          : 48
MAS_VAR              : 10
OPERADORES           : 39
OPERADORES_EXP       : 44
OPERADORES_FACTOR    : 53
OPERADORES_TER       : 50
PARAMETROS           : 18
PROGRAMA             : 0
SOLO_FUNCS           : 6 8
STATEMENT            : 29
TERMINO              : 43 50
TYPE                 : 10 21
VARS                 : 3 25
VARS_FUNC            : 18
epsilon              : 2 5 7 11 15 19 22 24 27 30 38 45 49 59 63 67 70

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . PROGRAM ID SEMICOLON DEC_VARS DEC_FUNCS MAIN BODY END

    PROGRAM         shift and go to state 2

    PROGRAMA                       shift and go to state 1

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> PROGRAM . ID SEMICOLON DEC_VARS DEC_FUNCS MAIN BODY END

    ID              shift and go to state 3


state 3

    (1) PROGRAMA -> PROGRAM ID . SEMICOLON DEC_VARS DEC_FUNCS MAIN BODY END

    SEMICOLON       shift and go to state 4


state 4

    (1) PROGRAMA -> PROGRAM ID SEMICOLON . DEC_VARS DEC_FUNCS MAIN BODY END
    (2) DEC_VARS -> . epsilon
    (3) DEC_VARS -> . VARS
    (72) epsilon -> .
    (9) VARS -> . VAR LISTA_VAR

    VOID            reduce using rule 72 (epsilon -> .)
    MAIN            reduce using rule 72 (epsilon -> .)
    VAR             shift and go to state 8

    DEC_VARS                       shift and go to state 5
    epsilon                        shift and go to state 6
    VARS                           shift and go to state 7

state 5

    (1) PROGRAMA -> PROGRAM ID SEMICOLON DEC_VARS . DEC_FUNCS MAIN BODY END
    (7) DEC_FUNCS -> . epsilon
    (8) DEC_FUNCS -> . SOLO_FUNCS
    (72) epsilon -> .
    (4) SOLO_FUNCS -> . FUNCS MAS_FUNCS
    (18) FUNCS -> . VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON

    MAIN            reduce using rule 72 (epsilon -> .)
    VOID            shift and go to state 13

    DEC_FUNCS                      shift and go to state 9
    epsilon                        shift and go to state 10
    SOLO_FUNCS                     shift and go to state 11
    FUNCS                          shift and go to state 12

state 6

    (2) DEC_VARS -> epsilon .

    VOID            reduce using rule 2 (DEC_VARS -> epsilon .)
    MAIN            reduce using rule 2 (DEC_VARS -> epsilon .)


state 7

    (3) DEC_VARS -> VARS .

    VOID            reduce using rule 3 (DEC_VARS -> VARS .)
    MAIN            reduce using rule 3 (DEC_VARS -> VARS .)


state 8

    (9) VARS -> VAR . LISTA_VAR
    (10) LISTA_VAR -> . LISTA_ID COLON TYPE SEMICOLON MAS_VAR
    (13) LISTA_ID -> . ID MAS_ID

    ID              shift and go to state 16

    LISTA_VAR                      shift and go to state 14
    LISTA_ID                       shift and go to state 15

state 9

    (1) PROGRAMA -> PROGRAM ID SEMICOLON DEC_VARS DEC_FUNCS . MAIN BODY END

    MAIN            shift and go to state 17


state 10

    (7) DEC_FUNCS -> epsilon .

    MAIN            reduce using rule 7 (DEC_FUNCS -> epsilon .)


state 11

    (8) DEC_FUNCS -> SOLO_FUNCS .

    MAIN            reduce using rule 8 (DEC_FUNCS -> SOLO_FUNCS .)


state 12

    (4) SOLO_FUNCS -> FUNCS . MAS_FUNCS
    (5) MAS_FUNCS -> . epsilon
    (6) MAS_FUNCS -> . SOLO_FUNCS
    (72) epsilon -> .
    (4) SOLO_FUNCS -> . FUNCS MAS_FUNCS
    (18) FUNCS -> . VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON

    MAIN            reduce using rule 72 (epsilon -> .)
    VOID            shift and go to state 13

    FUNCS                          shift and go to state 12
    MAS_FUNCS                      shift and go to state 18
    epsilon                        shift and go to state 19
    SOLO_FUNCS                     shift and go to state 20

state 13

    (18) FUNCS -> VOID . ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON

    ID              shift and go to state 21


state 14

    (9) VARS -> VAR LISTA_VAR .

    VOID            reduce using rule 9 (VARS -> VAR LISTA_VAR .)
    MAIN            reduce using rule 9 (VARS -> VAR LISTA_VAR .)
    LEFT_BRACE      reduce using rule 9 (VARS -> VAR LISTA_VAR .)


state 15

    (10) LISTA_VAR -> LISTA_ID . COLON TYPE SEMICOLON MAS_VAR

    COLON           shift and go to state 22


state 16

    (13) LISTA_ID -> ID . MAS_ID
    (14) MAS_ID -> . COMMA LISTA_ID
    (15) MAS_ID -> . epsilon
    (72) epsilon -> .

    COMMA           shift and go to state 24
    COLON           reduce using rule 72 (epsilon -> .)

    MAS_ID                         shift and go to state 23
    epsilon                        shift and go to state 25

state 17

    (1) PROGRAMA -> PROGRAM ID SEMICOLON DEC_VARS DEC_FUNCS MAIN . BODY END
    (26) BODY -> . LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE

    LEFT_BRACE      shift and go to state 27

    BODY                           shift and go to state 26

state 18

    (4) SOLO_FUNCS -> FUNCS MAS_FUNCS .

    MAIN            reduce using rule 4 (SOLO_FUNCS -> FUNCS MAS_FUNCS .)


state 19

    (5) MAS_FUNCS -> epsilon .

    MAIN            reduce using rule 5 (MAS_FUNCS -> epsilon .)


state 20

    (6) MAS_FUNCS -> SOLO_FUNCS .

    MAIN            reduce using rule 6 (MAS_FUNCS -> SOLO_FUNCS .)


state 21

    (18) FUNCS -> VOID ID . LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON

    LEFT_PARENTHESIS shift and go to state 28


state 22

    (10) LISTA_VAR -> LISTA_ID COLON . TYPE SEMICOLON MAS_VAR
    (16) TYPE -> . INT
    (17) TYPE -> . FLOAT

    INT             shift and go to state 30
    FLOAT           shift and go to state 31

    TYPE                           shift and go to state 29

state 23

    (13) LISTA_ID -> ID MAS_ID .

    COLON           reduce using rule 13 (LISTA_ID -> ID MAS_ID .)


state 24

    (14) MAS_ID -> COMMA . LISTA_ID
    (13) LISTA_ID -> . ID MAS_ID

    ID              shift and go to state 16

    LISTA_ID                       shift and go to state 32

state 25

    (15) MAS_ID -> epsilon .

    COLON           reduce using rule 15 (MAS_ID -> epsilon .)


state 26

    (1) PROGRAMA -> PROGRAM ID SEMICOLON DEC_VARS DEC_FUNCS MAIN BODY . END

    END             shift and go to state 33


state 27

    (26) BODY -> LEFT_BRACE . DEC_STATEMENTS RIGHT_BRACE
    (27) DEC_STATEMENTS -> . epsilon
    (28) DEC_STATEMENTS -> . LISTA_STATEMENTS
    (72) epsilon -> .
    (29) LISTA_STATEMENTS -> . STATEMENT MAS_STATEMENTS
    (32) STATEMENT -> . ASSIGN
    (33) STATEMENT -> . CONDITION
    (34) STATEMENT -> . CYCLE
    (35) STATEMENT -> . F_CALL
    (36) ASSIGN -> . ID EQUAL EXPRESION SEMICOLON
    (62) CONDITION -> . IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITION
    (65) CYCLE -> . WHILE BODY DO LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS SEMICOLON
    (66) F_CALL -> . ID LEFT_PARENTHESIS EXPRESIONES RIGHT_PARENTHESIS SEMICOLON

    RIGHT_BRACE     reduce using rule 72 (epsilon -> .)
    ID              shift and go to state 42
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    DEC_STATEMENTS                 shift and go to state 34
    epsilon                        shift and go to state 35
    LISTA_STATEMENTS               shift and go to state 36
    STATEMENT                      shift and go to state 37
    ASSIGN                         shift and go to state 38
    CONDITION                      shift and go to state 39
    CYCLE                          shift and go to state 40
    F_CALL                         shift and go to state 41

state 28

    (18) FUNCS -> VOID ID LEFT_PARENTHESIS . PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON
    (19) PARAMETROS -> . epsilon
    (20) PARAMETROS -> . DEC_PARAMETROS
    (72) epsilon -> .
    (21) DEC_PARAMETROS -> . ID COLON TYPE LISTA_PARAMETROS

    RIGHT_PARENTHESIS reduce using rule 72 (epsilon -> .)
    ID              shift and go to state 45

    PARAMETROS                     shift and go to state 46
    epsilon                        shift and go to state 47
    DEC_PARAMETROS                 shift and go to state 48

state 29

    (10) LISTA_VAR -> LISTA_ID COLON TYPE . SEMICOLON MAS_VAR

    SEMICOLON       shift and go to state 49


state 30

    (16) TYPE -> INT .

    SEMICOLON       reduce using rule 16 (TYPE -> INT .)
    COMMA           reduce using rule 16 (TYPE -> INT .)
    RIGHT_PARENTHESIS reduce using rule 16 (TYPE -> INT .)


state 31

    (17) TYPE -> FLOAT .

    SEMICOLON       reduce using rule 17 (TYPE -> FLOAT .)
    COMMA           reduce using rule 17 (TYPE -> FLOAT .)
    RIGHT_PARENTHESIS reduce using rule 17 (TYPE -> FLOAT .)


state 32

    (14) MAS_ID -> COMMA LISTA_ID .

    COLON           reduce using rule 14 (MAS_ID -> COMMA LISTA_ID .)


state 33

    (1) PROGRAMA -> PROGRAM ID SEMICOLON DEC_VARS DEC_FUNCS MAIN BODY END .

    $end            reduce using rule 1 (PROGRAMA -> PROGRAM ID SEMICOLON DEC_VARS DEC_FUNCS MAIN BODY END .)


state 34

    (26) BODY -> LEFT_BRACE DEC_STATEMENTS . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 50


state 35

    (27) DEC_STATEMENTS -> epsilon .

    RIGHT_BRACE     reduce using rule 27 (DEC_STATEMENTS -> epsilon .)


state 36

    (28) DEC_STATEMENTS -> LISTA_STATEMENTS .

    RIGHT_BRACE     reduce using rule 28 (DEC_STATEMENTS -> LISTA_STATEMENTS .)


state 37

    (29) LISTA_STATEMENTS -> STATEMENT . MAS_STATEMENTS
    (30) MAS_STATEMENTS -> . epsilon
    (31) MAS_STATEMENTS -> . LISTA_STATEMENTS
    (72) epsilon -> .
    (29) LISTA_STATEMENTS -> . STATEMENT MAS_STATEMENTS
    (32) STATEMENT -> . ASSIGN
    (33) STATEMENT -> . CONDITION
    (34) STATEMENT -> . CYCLE
    (35) STATEMENT -> . F_CALL
    (36) ASSIGN -> . ID EQUAL EXPRESION SEMICOLON
    (62) CONDITION -> . IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITION
    (65) CYCLE -> . WHILE BODY DO LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS SEMICOLON
    (66) F_CALL -> . ID LEFT_PARENTHESIS EXPRESIONES RIGHT_PARENTHESIS SEMICOLON

    RIGHT_BRACE     reduce using rule 72 (epsilon -> .)
    ID              shift and go to state 42
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    STATEMENT                      shift and go to state 37
    MAS_STATEMENTS                 shift and go to state 51
    epsilon                        shift and go to state 52
    LISTA_STATEMENTS               shift and go to state 53
    ASSIGN                         shift and go to state 38
    CONDITION                      shift and go to state 39
    CYCLE                          shift and go to state 40
    F_CALL                         shift and go to state 41

state 38

    (32) STATEMENT -> ASSIGN .

    ID              reduce using rule 32 (STATEMENT -> ASSIGN .)
    IF              reduce using rule 32 (STATEMENT -> ASSIGN .)
    WHILE           reduce using rule 32 (STATEMENT -> ASSIGN .)
    RIGHT_BRACE     reduce using rule 32 (STATEMENT -> ASSIGN .)


state 39

    (33) STATEMENT -> CONDITION .

    ID              reduce using rule 33 (STATEMENT -> CONDITION .)
    IF              reduce using rule 33 (STATEMENT -> CONDITION .)
    WHILE           reduce using rule 33 (STATEMENT -> CONDITION .)
    RIGHT_BRACE     reduce using rule 33 (STATEMENT -> CONDITION .)


state 40

    (34) STATEMENT -> CYCLE .

    ID              reduce using rule 34 (STATEMENT -> CYCLE .)
    IF              reduce using rule 34 (STATEMENT -> CYCLE .)
    WHILE           reduce using rule 34 (STATEMENT -> CYCLE .)
    RIGHT_BRACE     reduce using rule 34 (STATEMENT -> CYCLE .)


state 41

    (35) STATEMENT -> F_CALL .

    ID              reduce using rule 35 (STATEMENT -> F_CALL .)
    IF              reduce using rule 35 (STATEMENT -> F_CALL .)
    WHILE           reduce using rule 35 (STATEMENT -> F_CALL .)
    RIGHT_BRACE     reduce using rule 35 (STATEMENT -> F_CALL .)


state 42

    (36) ASSIGN -> ID . EQUAL EXPRESION SEMICOLON
    (66) F_CALL -> ID . LEFT_PARENTHESIS EXPRESIONES RIGHT_PARENTHESIS SEMICOLON

    EQUAL           shift and go to state 54
    LEFT_PARENTHESIS shift and go to state 55


state 43

    (62) CONDITION -> IF . LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITION

    LEFT_PARENTHESIS shift and go to state 56


state 44

    (65) CYCLE -> WHILE . BODY DO LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS SEMICOLON
    (26) BODY -> . LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE

    LEFT_BRACE      shift and go to state 27

    BODY                           shift and go to state 57

state 45

    (21) DEC_PARAMETROS -> ID . COLON TYPE LISTA_PARAMETROS

    COLON           shift and go to state 58


state 46

    (18) FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS . RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 59


state 47

    (19) PARAMETROS -> epsilon .

    RIGHT_PARENTHESIS reduce using rule 19 (PARAMETROS -> epsilon .)


state 48

    (20) PARAMETROS -> DEC_PARAMETROS .

    RIGHT_PARENTHESIS reduce using rule 20 (PARAMETROS -> DEC_PARAMETROS .)


state 49

    (10) LISTA_VAR -> LISTA_ID COLON TYPE SEMICOLON . MAS_VAR
    (11) MAS_VAR -> . epsilon
    (12) MAS_VAR -> . LISTA_VAR
    (72) epsilon -> .
    (10) LISTA_VAR -> . LISTA_ID COLON TYPE SEMICOLON MAS_VAR
    (13) LISTA_ID -> . ID MAS_ID

    VOID            reduce using rule 72 (epsilon -> .)
    MAIN            reduce using rule 72 (epsilon -> .)
    LEFT_BRACE      reduce using rule 72 (epsilon -> .)
    ID              shift and go to state 16

    LISTA_ID                       shift and go to state 15
    MAS_VAR                        shift and go to state 60
    epsilon                        shift and go to state 61
    LISTA_VAR                      shift and go to state 62

state 50

    (26) BODY -> LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE .

    END             reduce using rule 26 (BODY -> LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE .)
    DO              reduce using rule 26 (BODY -> LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE .)
    ELSE            reduce using rule 26 (BODY -> LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE .)
    ID              reduce using rule 26 (BODY -> LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE .)
    IF              reduce using rule 26 (BODY -> LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE .)
    WHILE           reduce using rule 26 (BODY -> LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 26 (BODY -> LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE .)
    RIGHT_BRACKET   reduce using rule 26 (BODY -> LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE .)


state 51

    (29) LISTA_STATEMENTS -> STATEMENT MAS_STATEMENTS .

    RIGHT_BRACE     reduce using rule 29 (LISTA_STATEMENTS -> STATEMENT MAS_STATEMENTS .)


state 52

    (30) MAS_STATEMENTS -> epsilon .

    RIGHT_BRACE     reduce using rule 30 (MAS_STATEMENTS -> epsilon .)


state 53

    (31) MAS_STATEMENTS -> LISTA_STATEMENTS .

    RIGHT_BRACE     reduce using rule 31 (MAS_STATEMENTS -> LISTA_STATEMENTS .)


state 54

    (36) ASSIGN -> ID EQUAL . EXPRESION SEMICOLON
    (37) EXPRESION -> . EXP MAS_EXPRESIONES
    (43) EXP -> . TERMINO MAS_EXP
    (48) TERMINO -> . FACTOR MAS_TERMINO
    (53) FACTOR -> . OPERADORES_FACTOR ID_CTE
    (54) FACTOR -> . LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS
    (57) OPERADORES_FACTOR -> . PLUS
    (58) OPERADORES_FACTOR -> . MINUS
    (59) OPERADORES_FACTOR -> . epsilon
    (72) epsilon -> .

    LEFT_PARENTHESIS shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    ID              reduce using rule 72 (epsilon -> .)
    CTE_INT         reduce using rule 72 (epsilon -> .)
    CTE_FLOAT       reduce using rule 72 (epsilon -> .)

    EXPRESION                      shift and go to state 63
    EXP                            shift and go to state 64
    TERMINO                        shift and go to state 65
    FACTOR                         shift and go to state 66
    OPERADORES_FACTOR              shift and go to state 67
    epsilon                        shift and go to state 71

state 55

    (66) F_CALL -> ID LEFT_PARENTHESIS . EXPRESIONES RIGHT_PARENTHESIS SEMICOLON
    (67) EXPRESIONES -> . epsilon
    (68) EXPRESIONES -> . EXPRESIONES_F
    (72) epsilon -> .
    (69) EXPRESIONES_F -> . EXPRESION LISTA_EXP
    (37) EXPRESION -> . EXP MAS_EXPRESIONES
    (43) EXP -> . TERMINO MAS_EXP
    (48) TERMINO -> . FACTOR MAS_TERMINO
    (53) FACTOR -> . OPERADORES_FACTOR ID_CTE
    (54) FACTOR -> . LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS
    (57) OPERADORES_FACTOR -> . PLUS
    (58) OPERADORES_FACTOR -> . MINUS
    (59) OPERADORES_FACTOR -> . epsilon

    RIGHT_PARENTHESIS reduce using rule 72 (epsilon -> .)
    ID              reduce using rule 72 (epsilon -> .)
    CTE_INT         reduce using rule 72 (epsilon -> .)
    CTE_FLOAT       reduce using rule 72 (epsilon -> .)
    LEFT_PARENTHESIS shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70

    EXPRESIONES                    shift and go to state 72
    epsilon                        shift and go to state 73
    EXPRESIONES_F                  shift and go to state 74
    EXPRESION                      shift and go to state 75
    EXP                            shift and go to state 64
    TERMINO                        shift and go to state 65
    FACTOR                         shift and go to state 66
    OPERADORES_FACTOR              shift and go to state 67

state 56

    (62) CONDITION -> IF LEFT_PARENTHESIS . EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITION
    (37) EXPRESION -> . EXP MAS_EXPRESIONES
    (43) EXP -> . TERMINO MAS_EXP
    (48) TERMINO -> . FACTOR MAS_TERMINO
    (53) FACTOR -> . OPERADORES_FACTOR ID_CTE
    (54) FACTOR -> . LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS
    (57) OPERADORES_FACTOR -> . PLUS
    (58) OPERADORES_FACTOR -> . MINUS
    (59) OPERADORES_FACTOR -> . epsilon
    (72) epsilon -> .

    LEFT_PARENTHESIS shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    ID              reduce using rule 72 (epsilon -> .)
    CTE_INT         reduce using rule 72 (epsilon -> .)
    CTE_FLOAT       reduce using rule 72 (epsilon -> .)

    EXPRESION                      shift and go to state 76
    EXP                            shift and go to state 64
    TERMINO                        shift and go to state 65
    FACTOR                         shift and go to state 66
    OPERADORES_FACTOR              shift and go to state 67
    epsilon                        shift and go to state 71

state 57

    (65) CYCLE -> WHILE BODY . DO LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS SEMICOLON

    DO              shift and go to state 77


state 58

    (21) DEC_PARAMETROS -> ID COLON . TYPE LISTA_PARAMETROS
    (16) TYPE -> . INT
    (17) TYPE -> . FLOAT

    INT             shift and go to state 30
    FLOAT           shift and go to state 31

    TYPE                           shift and go to state 78

state 59

    (18) FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS . LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON

    LEFT_BRACKET    shift and go to state 79


state 60

    (10) LISTA_VAR -> LISTA_ID COLON TYPE SEMICOLON MAS_VAR .

    VOID            reduce using rule 10 (LISTA_VAR -> LISTA_ID COLON TYPE SEMICOLON MAS_VAR .)
    MAIN            reduce using rule 10 (LISTA_VAR -> LISTA_ID COLON TYPE SEMICOLON MAS_VAR .)
    LEFT_BRACE      reduce using rule 10 (LISTA_VAR -> LISTA_ID COLON TYPE SEMICOLON MAS_VAR .)


state 61

    (11) MAS_VAR -> epsilon .

    VOID            reduce using rule 11 (MAS_VAR -> epsilon .)
    MAIN            reduce using rule 11 (MAS_VAR -> epsilon .)
    LEFT_BRACE      reduce using rule 11 (MAS_VAR -> epsilon .)


state 62

    (12) MAS_VAR -> LISTA_VAR .

    VOID            reduce using rule 12 (MAS_VAR -> LISTA_VAR .)
    MAIN            reduce using rule 12 (MAS_VAR -> LISTA_VAR .)
    LEFT_BRACE      reduce using rule 12 (MAS_VAR -> LISTA_VAR .)


state 63

    (36) ASSIGN -> ID EQUAL EXPRESION . SEMICOLON

    SEMICOLON       shift and go to state 80


state 64

    (37) EXPRESION -> EXP . MAS_EXPRESIONES
    (38) MAS_EXPRESIONES -> . epsilon
    (39) MAS_EXPRESIONES -> . OPERADORES EXP
    (72) epsilon -> .
    (40) OPERADORES -> . GREATER_THAN
    (41) OPERADORES -> . LESS_THAN
    (42) OPERADORES -> . NOT_EQUAL

    SEMICOLON       reduce using rule 72 (epsilon -> .)
    COMMA           reduce using rule 72 (epsilon -> .)
    RIGHT_PARENTHESIS reduce using rule 72 (epsilon -> .)
    GREATER_THAN    shift and go to state 84
    LESS_THAN       shift and go to state 85
    NOT_EQUAL       shift and go to state 86

    MAS_EXPRESIONES                shift and go to state 81
    epsilon                        shift and go to state 82
    OPERADORES                     shift and go to state 83

state 65

    (43) EXP -> TERMINO . MAS_EXP
    (44) MAS_EXP -> . OPERADORES_EXP EXP
    (45) MAS_EXP -> . epsilon
    (46) OPERADORES_EXP -> . PLUS
    (47) OPERADORES_EXP -> . MINUS
    (72) epsilon -> .

    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    GREATER_THAN    reduce using rule 72 (epsilon -> .)
    LESS_THAN       reduce using rule 72 (epsilon -> .)
    NOT_EQUAL       reduce using rule 72 (epsilon -> .)
    SEMICOLON       reduce using rule 72 (epsilon -> .)
    COMMA           reduce using rule 72 (epsilon -> .)
    RIGHT_PARENTHESIS reduce using rule 72 (epsilon -> .)

    MAS_EXP                        shift and go to state 87
    OPERADORES_EXP                 shift and go to state 88
    epsilon                        shift and go to state 89

state 66

    (48) TERMINO -> FACTOR . MAS_TERMINO
    (49) MAS_TERMINO -> . epsilon
    (50) MAS_TERMINO -> . OPERADORES_TER TERMINO
    (72) epsilon -> .
    (51) OPERADORES_TER -> . MULTIPLICATION
    (52) OPERADORES_TER -> . DIVISION

    PLUS            reduce using rule 72 (epsilon -> .)
    MINUS           reduce using rule 72 (epsilon -> .)
    GREATER_THAN    reduce using rule 72 (epsilon -> .)
    LESS_THAN       reduce using rule 72 (epsilon -> .)
    NOT_EQUAL       reduce using rule 72 (epsilon -> .)
    SEMICOLON       reduce using rule 72 (epsilon -> .)
    COMMA           reduce using rule 72 (epsilon -> .)
    RIGHT_PARENTHESIS reduce using rule 72 (epsilon -> .)
    MULTIPLICATION  shift and go to state 95
    DIVISION        shift and go to state 96

    MAS_TERMINO                    shift and go to state 92
    epsilon                        shift and go to state 93
    OPERADORES_TER                 shift and go to state 94

state 67

    (53) FACTOR -> OPERADORES_FACTOR . ID_CTE
    (55) ID_CTE -> . ID
    (56) ID_CTE -> . CTE
    (60) CTE -> . CTE_INT
    (61) CTE -> . CTE_FLOAT

    ID              shift and go to state 98
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    ID_CTE                         shift and go to state 97
    CTE                            shift and go to state 99

state 68

    (54) FACTOR -> LEFT_PARENTHESIS . EXPRESION RIGHT_PARENTHESIS
    (37) EXPRESION -> . EXP MAS_EXPRESIONES
    (43) EXP -> . TERMINO MAS_EXP
    (48) TERMINO -> . FACTOR MAS_TERMINO
    (53) FACTOR -> . OPERADORES_FACTOR ID_CTE
    (54) FACTOR -> . LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS
    (57) OPERADORES_FACTOR -> . PLUS
    (58) OPERADORES_FACTOR -> . MINUS
    (59) OPERADORES_FACTOR -> . epsilon
    (72) epsilon -> .

    LEFT_PARENTHESIS shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    ID              reduce using rule 72 (epsilon -> .)
    CTE_INT         reduce using rule 72 (epsilon -> .)
    CTE_FLOAT       reduce using rule 72 (epsilon -> .)

    EXPRESION                      shift and go to state 102
    EXP                            shift and go to state 64
    TERMINO                        shift and go to state 65
    FACTOR                         shift and go to state 66
    OPERADORES_FACTOR              shift and go to state 67
    epsilon                        shift and go to state 71

state 69

    (57) OPERADORES_FACTOR -> PLUS .

    ID              reduce using rule 57 (OPERADORES_FACTOR -> PLUS .)
    CTE_INT         reduce using rule 57 (OPERADORES_FACTOR -> PLUS .)
    CTE_FLOAT       reduce using rule 57 (OPERADORES_FACTOR -> PLUS .)


state 70

    (58) OPERADORES_FACTOR -> MINUS .

    ID              reduce using rule 58 (OPERADORES_FACTOR -> MINUS .)
    CTE_INT         reduce using rule 58 (OPERADORES_FACTOR -> MINUS .)
    CTE_FLOAT       reduce using rule 58 (OPERADORES_FACTOR -> MINUS .)


state 71

    (59) OPERADORES_FACTOR -> epsilon .

    ID              reduce using rule 59 (OPERADORES_FACTOR -> epsilon .)
    CTE_INT         reduce using rule 59 (OPERADORES_FACTOR -> epsilon .)
    CTE_FLOAT       reduce using rule 59 (OPERADORES_FACTOR -> epsilon .)


state 72

    (66) F_CALL -> ID LEFT_PARENTHESIS EXPRESIONES . RIGHT_PARENTHESIS SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 103


state 73

    (67) EXPRESIONES -> epsilon .
    (59) OPERADORES_FACTOR -> epsilon .

    RIGHT_PARENTHESIS reduce using rule 67 (EXPRESIONES -> epsilon .)
    ID              reduce using rule 59 (OPERADORES_FACTOR -> epsilon .)
    CTE_INT         reduce using rule 59 (OPERADORES_FACTOR -> epsilon .)
    CTE_FLOAT       reduce using rule 59 (OPERADORES_FACTOR -> epsilon .)


state 74

    (68) EXPRESIONES -> EXPRESIONES_F .

    RIGHT_PARENTHESIS reduce using rule 68 (EXPRESIONES -> EXPRESIONES_F .)


state 75

    (69) EXPRESIONES_F -> EXPRESION . LISTA_EXP
    (70) LISTA_EXP -> . epsilon
    (71) LISTA_EXP -> . COMMA EXPRESIONES_F
    (72) epsilon -> .

    COMMA           shift and go to state 106
    RIGHT_PARENTHESIS reduce using rule 72 (epsilon -> .)

    LISTA_EXP                      shift and go to state 104
    epsilon                        shift and go to state 105

state 76

    (62) CONDITION -> IF LEFT_PARENTHESIS EXPRESION . RIGHT_PARENTHESIS BODY ELSE_CONDITION

    RIGHT_PARENTHESIS shift and go to state 107


state 77

    (65) CYCLE -> WHILE BODY DO . LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS SEMICOLON

    LEFT_PARENTHESIS shift and go to state 108


state 78

    (21) DEC_PARAMETROS -> ID COLON TYPE . LISTA_PARAMETROS
    (22) LISTA_PARAMETROS -> . epsilon
    (23) LISTA_PARAMETROS -> . COMMA DEC_PARAMETROS
    (72) epsilon -> .

    COMMA           shift and go to state 111
    RIGHT_PARENTHESIS reduce using rule 72 (epsilon -> .)

    LISTA_PARAMETROS               shift and go to state 109
    epsilon                        shift and go to state 110

state 79

    (18) FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET . VARS_FUNC BODY RIGHT_BRACKET SEMICOLON
    (24) VARS_FUNC -> . epsilon
    (25) VARS_FUNC -> . VARS
    (72) epsilon -> .
    (9) VARS -> . VAR LISTA_VAR

    LEFT_BRACE      reduce using rule 72 (epsilon -> .)
    VAR             shift and go to state 8

    VARS_FUNC                      shift and go to state 112
    epsilon                        shift and go to state 113
    VARS                           shift and go to state 114

state 80

    (36) ASSIGN -> ID EQUAL EXPRESION SEMICOLON .

    ID              reduce using rule 36 (ASSIGN -> ID EQUAL EXPRESION SEMICOLON .)
    IF              reduce using rule 36 (ASSIGN -> ID EQUAL EXPRESION SEMICOLON .)
    WHILE           reduce using rule 36 (ASSIGN -> ID EQUAL EXPRESION SEMICOLON .)
    RIGHT_BRACE     reduce using rule 36 (ASSIGN -> ID EQUAL EXPRESION SEMICOLON .)


state 81

    (37) EXPRESION -> EXP MAS_EXPRESIONES .

    SEMICOLON       reduce using rule 37 (EXPRESION -> EXP MAS_EXPRESIONES .)
    COMMA           reduce using rule 37 (EXPRESION -> EXP MAS_EXPRESIONES .)
    RIGHT_PARENTHESIS reduce using rule 37 (EXPRESION -> EXP MAS_EXPRESIONES .)


state 82

    (38) MAS_EXPRESIONES -> epsilon .

    SEMICOLON       reduce using rule 38 (MAS_EXPRESIONES -> epsilon .)
    COMMA           reduce using rule 38 (MAS_EXPRESIONES -> epsilon .)
    RIGHT_PARENTHESIS reduce using rule 38 (MAS_EXPRESIONES -> epsilon .)


state 83

    (39) MAS_EXPRESIONES -> OPERADORES . EXP
    (43) EXP -> . TERMINO MAS_EXP
    (48) TERMINO -> . FACTOR MAS_TERMINO
    (53) FACTOR -> . OPERADORES_FACTOR ID_CTE
    (54) FACTOR -> . LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS
    (57) OPERADORES_FACTOR -> . PLUS
    (58) OPERADORES_FACTOR -> . MINUS
    (59) OPERADORES_FACTOR -> . epsilon
    (72) epsilon -> .

    LEFT_PARENTHESIS shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    ID              reduce using rule 72 (epsilon -> .)
    CTE_INT         reduce using rule 72 (epsilon -> .)
    CTE_FLOAT       reduce using rule 72 (epsilon -> .)

    EXP                            shift and go to state 115
    TERMINO                        shift and go to state 65
    FACTOR                         shift and go to state 66
    OPERADORES_FACTOR              shift and go to state 67
    epsilon                        shift and go to state 71

state 84

    (40) OPERADORES -> GREATER_THAN .

    LEFT_PARENTHESIS reduce using rule 40 (OPERADORES -> GREATER_THAN .)
    PLUS            reduce using rule 40 (OPERADORES -> GREATER_THAN .)
    MINUS           reduce using rule 40 (OPERADORES -> GREATER_THAN .)
    ID              reduce using rule 40 (OPERADORES -> GREATER_THAN .)
    CTE_INT         reduce using rule 40 (OPERADORES -> GREATER_THAN .)
    CTE_FLOAT       reduce using rule 40 (OPERADORES -> GREATER_THAN .)


state 85

    (41) OPERADORES -> LESS_THAN .

    LEFT_PARENTHESIS reduce using rule 41 (OPERADORES -> LESS_THAN .)
    PLUS            reduce using rule 41 (OPERADORES -> LESS_THAN .)
    MINUS           reduce using rule 41 (OPERADORES -> LESS_THAN .)
    ID              reduce using rule 41 (OPERADORES -> LESS_THAN .)
    CTE_INT         reduce using rule 41 (OPERADORES -> LESS_THAN .)
    CTE_FLOAT       reduce using rule 41 (OPERADORES -> LESS_THAN .)


state 86

    (42) OPERADORES -> NOT_EQUAL .

    LEFT_PARENTHESIS reduce using rule 42 (OPERADORES -> NOT_EQUAL .)
    PLUS            reduce using rule 42 (OPERADORES -> NOT_EQUAL .)
    MINUS           reduce using rule 42 (OPERADORES -> NOT_EQUAL .)
    ID              reduce using rule 42 (OPERADORES -> NOT_EQUAL .)
    CTE_INT         reduce using rule 42 (OPERADORES -> NOT_EQUAL .)
    CTE_FLOAT       reduce using rule 42 (OPERADORES -> NOT_EQUAL .)


state 87

    (43) EXP -> TERMINO MAS_EXP .

    GREATER_THAN    reduce using rule 43 (EXP -> TERMINO MAS_EXP .)
    LESS_THAN       reduce using rule 43 (EXP -> TERMINO MAS_EXP .)
    NOT_EQUAL       reduce using rule 43 (EXP -> TERMINO MAS_EXP .)
    SEMICOLON       reduce using rule 43 (EXP -> TERMINO MAS_EXP .)
    COMMA           reduce using rule 43 (EXP -> TERMINO MAS_EXP .)
    RIGHT_PARENTHESIS reduce using rule 43 (EXP -> TERMINO MAS_EXP .)


state 88

    (44) MAS_EXP -> OPERADORES_EXP . EXP
    (43) EXP -> . TERMINO MAS_EXP
    (48) TERMINO -> . FACTOR MAS_TERMINO
    (53) FACTOR -> . OPERADORES_FACTOR ID_CTE
    (54) FACTOR -> . LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS
    (57) OPERADORES_FACTOR -> . PLUS
    (58) OPERADORES_FACTOR -> . MINUS
    (59) OPERADORES_FACTOR -> . epsilon
    (72) epsilon -> .

    LEFT_PARENTHESIS shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    ID              reduce using rule 72 (epsilon -> .)
    CTE_INT         reduce using rule 72 (epsilon -> .)
    CTE_FLOAT       reduce using rule 72 (epsilon -> .)

    EXP                            shift and go to state 116
    TERMINO                        shift and go to state 65
    FACTOR                         shift and go to state 66
    OPERADORES_FACTOR              shift and go to state 67
    epsilon                        shift and go to state 71

state 89

    (45) MAS_EXP -> epsilon .

    GREATER_THAN    reduce using rule 45 (MAS_EXP -> epsilon .)
    LESS_THAN       reduce using rule 45 (MAS_EXP -> epsilon .)
    NOT_EQUAL       reduce using rule 45 (MAS_EXP -> epsilon .)
    SEMICOLON       reduce using rule 45 (MAS_EXP -> epsilon .)
    COMMA           reduce using rule 45 (MAS_EXP -> epsilon .)
    RIGHT_PARENTHESIS reduce using rule 45 (MAS_EXP -> epsilon .)


state 90

    (46) OPERADORES_EXP -> PLUS .

    LEFT_PARENTHESIS reduce using rule 46 (OPERADORES_EXP -> PLUS .)
    PLUS            reduce using rule 46 (OPERADORES_EXP -> PLUS .)
    MINUS           reduce using rule 46 (OPERADORES_EXP -> PLUS .)
    ID              reduce using rule 46 (OPERADORES_EXP -> PLUS .)
    CTE_INT         reduce using rule 46 (OPERADORES_EXP -> PLUS .)
    CTE_FLOAT       reduce using rule 46 (OPERADORES_EXP -> PLUS .)


state 91

    (47) OPERADORES_EXP -> MINUS .

    LEFT_PARENTHESIS reduce using rule 47 (OPERADORES_EXP -> MINUS .)
    PLUS            reduce using rule 47 (OPERADORES_EXP -> MINUS .)
    MINUS           reduce using rule 47 (OPERADORES_EXP -> MINUS .)
    ID              reduce using rule 47 (OPERADORES_EXP -> MINUS .)
    CTE_INT         reduce using rule 47 (OPERADORES_EXP -> MINUS .)
    CTE_FLOAT       reduce using rule 47 (OPERADORES_EXP -> MINUS .)


state 92

    (48) TERMINO -> FACTOR MAS_TERMINO .

    PLUS            reduce using rule 48 (TERMINO -> FACTOR MAS_TERMINO .)
    MINUS           reduce using rule 48 (TERMINO -> FACTOR MAS_TERMINO .)
    GREATER_THAN    reduce using rule 48 (TERMINO -> FACTOR MAS_TERMINO .)
    LESS_THAN       reduce using rule 48 (TERMINO -> FACTOR MAS_TERMINO .)
    NOT_EQUAL       reduce using rule 48 (TERMINO -> FACTOR MAS_TERMINO .)
    SEMICOLON       reduce using rule 48 (TERMINO -> FACTOR MAS_TERMINO .)
    COMMA           reduce using rule 48 (TERMINO -> FACTOR MAS_TERMINO .)
    RIGHT_PARENTHESIS reduce using rule 48 (TERMINO -> FACTOR MAS_TERMINO .)


state 93

    (49) MAS_TERMINO -> epsilon .

    PLUS            reduce using rule 49 (MAS_TERMINO -> epsilon .)
    MINUS           reduce using rule 49 (MAS_TERMINO -> epsilon .)
    GREATER_THAN    reduce using rule 49 (MAS_TERMINO -> epsilon .)
    LESS_THAN       reduce using rule 49 (MAS_TERMINO -> epsilon .)
    NOT_EQUAL       reduce using rule 49 (MAS_TERMINO -> epsilon .)
    SEMICOLON       reduce using rule 49 (MAS_TERMINO -> epsilon .)
    COMMA           reduce using rule 49 (MAS_TERMINO -> epsilon .)
    RIGHT_PARENTHESIS reduce using rule 49 (MAS_TERMINO -> epsilon .)


state 94

    (50) MAS_TERMINO -> OPERADORES_TER . TERMINO
    (48) TERMINO -> . FACTOR MAS_TERMINO
    (53) FACTOR -> . OPERADORES_FACTOR ID_CTE
    (54) FACTOR -> . LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS
    (57) OPERADORES_FACTOR -> . PLUS
    (58) OPERADORES_FACTOR -> . MINUS
    (59) OPERADORES_FACTOR -> . epsilon
    (72) epsilon -> .

    LEFT_PARENTHESIS shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    ID              reduce using rule 72 (epsilon -> .)
    CTE_INT         reduce using rule 72 (epsilon -> .)
    CTE_FLOAT       reduce using rule 72 (epsilon -> .)

    TERMINO                        shift and go to state 117
    FACTOR                         shift and go to state 66
    OPERADORES_FACTOR              shift and go to state 67
    epsilon                        shift and go to state 71

state 95

    (51) OPERADORES_TER -> MULTIPLICATION .

    LEFT_PARENTHESIS reduce using rule 51 (OPERADORES_TER -> MULTIPLICATION .)
    PLUS            reduce using rule 51 (OPERADORES_TER -> MULTIPLICATION .)
    MINUS           reduce using rule 51 (OPERADORES_TER -> MULTIPLICATION .)
    ID              reduce using rule 51 (OPERADORES_TER -> MULTIPLICATION .)
    CTE_INT         reduce using rule 51 (OPERADORES_TER -> MULTIPLICATION .)
    CTE_FLOAT       reduce using rule 51 (OPERADORES_TER -> MULTIPLICATION .)


state 96

    (52) OPERADORES_TER -> DIVISION .

    LEFT_PARENTHESIS reduce using rule 52 (OPERADORES_TER -> DIVISION .)
    PLUS            reduce using rule 52 (OPERADORES_TER -> DIVISION .)
    MINUS           reduce using rule 52 (OPERADORES_TER -> DIVISION .)
    ID              reduce using rule 52 (OPERADORES_TER -> DIVISION .)
    CTE_INT         reduce using rule 52 (OPERADORES_TER -> DIVISION .)
    CTE_FLOAT       reduce using rule 52 (OPERADORES_TER -> DIVISION .)


state 97

    (53) FACTOR -> OPERADORES_FACTOR ID_CTE .

    MULTIPLICATION  reduce using rule 53 (FACTOR -> OPERADORES_FACTOR ID_CTE .)
    DIVISION        reduce using rule 53 (FACTOR -> OPERADORES_FACTOR ID_CTE .)
    PLUS            reduce using rule 53 (FACTOR -> OPERADORES_FACTOR ID_CTE .)
    MINUS           reduce using rule 53 (FACTOR -> OPERADORES_FACTOR ID_CTE .)
    GREATER_THAN    reduce using rule 53 (FACTOR -> OPERADORES_FACTOR ID_CTE .)
    LESS_THAN       reduce using rule 53 (FACTOR -> OPERADORES_FACTOR ID_CTE .)
    NOT_EQUAL       reduce using rule 53 (FACTOR -> OPERADORES_FACTOR ID_CTE .)
    SEMICOLON       reduce using rule 53 (FACTOR -> OPERADORES_FACTOR ID_CTE .)
    COMMA           reduce using rule 53 (FACTOR -> OPERADORES_FACTOR ID_CTE .)
    RIGHT_PARENTHESIS reduce using rule 53 (FACTOR -> OPERADORES_FACTOR ID_CTE .)


state 98

    (55) ID_CTE -> ID .

    MULTIPLICATION  reduce using rule 55 (ID_CTE -> ID .)
    DIVISION        reduce using rule 55 (ID_CTE -> ID .)
    PLUS            reduce using rule 55 (ID_CTE -> ID .)
    MINUS           reduce using rule 55 (ID_CTE -> ID .)
    GREATER_THAN    reduce using rule 55 (ID_CTE -> ID .)
    LESS_THAN       reduce using rule 55 (ID_CTE -> ID .)
    NOT_EQUAL       reduce using rule 55 (ID_CTE -> ID .)
    SEMICOLON       reduce using rule 55 (ID_CTE -> ID .)
    COMMA           reduce using rule 55 (ID_CTE -> ID .)
    RIGHT_PARENTHESIS reduce using rule 55 (ID_CTE -> ID .)


state 99

    (56) ID_CTE -> CTE .

    MULTIPLICATION  reduce using rule 56 (ID_CTE -> CTE .)
    DIVISION        reduce using rule 56 (ID_CTE -> CTE .)
    PLUS            reduce using rule 56 (ID_CTE -> CTE .)
    MINUS           reduce using rule 56 (ID_CTE -> CTE .)
    GREATER_THAN    reduce using rule 56 (ID_CTE -> CTE .)
    LESS_THAN       reduce using rule 56 (ID_CTE -> CTE .)
    NOT_EQUAL       reduce using rule 56 (ID_CTE -> CTE .)
    SEMICOLON       reduce using rule 56 (ID_CTE -> CTE .)
    COMMA           reduce using rule 56 (ID_CTE -> CTE .)
    RIGHT_PARENTHESIS reduce using rule 56 (ID_CTE -> CTE .)


state 100

    (60) CTE -> CTE_INT .

    MULTIPLICATION  reduce using rule 60 (CTE -> CTE_INT .)
    DIVISION        reduce using rule 60 (CTE -> CTE_INT .)
    PLUS            reduce using rule 60 (CTE -> CTE_INT .)
    MINUS           reduce using rule 60 (CTE -> CTE_INT .)
    GREATER_THAN    reduce using rule 60 (CTE -> CTE_INT .)
    LESS_THAN       reduce using rule 60 (CTE -> CTE_INT .)
    NOT_EQUAL       reduce using rule 60 (CTE -> CTE_INT .)
    SEMICOLON       reduce using rule 60 (CTE -> CTE_INT .)
    COMMA           reduce using rule 60 (CTE -> CTE_INT .)
    RIGHT_PARENTHESIS reduce using rule 60 (CTE -> CTE_INT .)


state 101

    (61) CTE -> CTE_FLOAT .

    MULTIPLICATION  reduce using rule 61 (CTE -> CTE_FLOAT .)
    DIVISION        reduce using rule 61 (CTE -> CTE_FLOAT .)
    PLUS            reduce using rule 61 (CTE -> CTE_FLOAT .)
    MINUS           reduce using rule 61 (CTE -> CTE_FLOAT .)
    GREATER_THAN    reduce using rule 61 (CTE -> CTE_FLOAT .)
    LESS_THAN       reduce using rule 61 (CTE -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 61 (CTE -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 61 (CTE -> CTE_FLOAT .)
    COMMA           reduce using rule 61 (CTE -> CTE_FLOAT .)
    RIGHT_PARENTHESIS reduce using rule 61 (CTE -> CTE_FLOAT .)


state 102

    (54) FACTOR -> LEFT_PARENTHESIS EXPRESION . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 118


state 103

    (66) F_CALL -> ID LEFT_PARENTHESIS EXPRESIONES RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 119


state 104

    (69) EXPRESIONES_F -> EXPRESION LISTA_EXP .

    RIGHT_PARENTHESIS reduce using rule 69 (EXPRESIONES_F -> EXPRESION LISTA_EXP .)


state 105

    (70) LISTA_EXP -> epsilon .

    RIGHT_PARENTHESIS reduce using rule 70 (LISTA_EXP -> epsilon .)


state 106

    (71) LISTA_EXP -> COMMA . EXPRESIONES_F
    (69) EXPRESIONES_F -> . EXPRESION LISTA_EXP
    (37) EXPRESION -> . EXP MAS_EXPRESIONES
    (43) EXP -> . TERMINO MAS_EXP
    (48) TERMINO -> . FACTOR MAS_TERMINO
    (53) FACTOR -> . OPERADORES_FACTOR ID_CTE
    (54) FACTOR -> . LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS
    (57) OPERADORES_FACTOR -> . PLUS
    (58) OPERADORES_FACTOR -> . MINUS
    (59) OPERADORES_FACTOR -> . epsilon
    (72) epsilon -> .

    LEFT_PARENTHESIS shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    ID              reduce using rule 72 (epsilon -> .)
    CTE_INT         reduce using rule 72 (epsilon -> .)
    CTE_FLOAT       reduce using rule 72 (epsilon -> .)

    EXPRESIONES_F                  shift and go to state 120
    EXPRESION                      shift and go to state 75
    EXP                            shift and go to state 64
    TERMINO                        shift and go to state 65
    FACTOR                         shift and go to state 66
    OPERADORES_FACTOR              shift and go to state 67
    epsilon                        shift and go to state 71

state 107

    (62) CONDITION -> IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS . BODY ELSE_CONDITION
    (26) BODY -> . LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE

    LEFT_BRACE      shift and go to state 27

    BODY                           shift and go to state 121

state 108

    (65) CYCLE -> WHILE BODY DO LEFT_PARENTHESIS . EXPRESION RIGHT_PARENTHESIS SEMICOLON
    (37) EXPRESION -> . EXP MAS_EXPRESIONES
    (43) EXP -> . TERMINO MAS_EXP
    (48) TERMINO -> . FACTOR MAS_TERMINO
    (53) FACTOR -> . OPERADORES_FACTOR ID_CTE
    (54) FACTOR -> . LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS
    (57) OPERADORES_FACTOR -> . PLUS
    (58) OPERADORES_FACTOR -> . MINUS
    (59) OPERADORES_FACTOR -> . epsilon
    (72) epsilon -> .

    LEFT_PARENTHESIS shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    ID              reduce using rule 72 (epsilon -> .)
    CTE_INT         reduce using rule 72 (epsilon -> .)
    CTE_FLOAT       reduce using rule 72 (epsilon -> .)

    EXPRESION                      shift and go to state 122
    EXP                            shift and go to state 64
    TERMINO                        shift and go to state 65
    FACTOR                         shift and go to state 66
    OPERADORES_FACTOR              shift and go to state 67
    epsilon                        shift and go to state 71

state 109

    (21) DEC_PARAMETROS -> ID COLON TYPE LISTA_PARAMETROS .

    RIGHT_PARENTHESIS reduce using rule 21 (DEC_PARAMETROS -> ID COLON TYPE LISTA_PARAMETROS .)


state 110

    (22) LISTA_PARAMETROS -> epsilon .

    RIGHT_PARENTHESIS reduce using rule 22 (LISTA_PARAMETROS -> epsilon .)


state 111

    (23) LISTA_PARAMETROS -> COMMA . DEC_PARAMETROS
    (21) DEC_PARAMETROS -> . ID COLON TYPE LISTA_PARAMETROS

    ID              shift and go to state 45

    DEC_PARAMETROS                 shift and go to state 123

state 112

    (18) FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC . BODY RIGHT_BRACKET SEMICOLON
    (26) BODY -> . LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE

    LEFT_BRACE      shift and go to state 27

    BODY                           shift and go to state 124

state 113

    (24) VARS_FUNC -> epsilon .

    LEFT_BRACE      reduce using rule 24 (VARS_FUNC -> epsilon .)


state 114

    (25) VARS_FUNC -> VARS .

    LEFT_BRACE      reduce using rule 25 (VARS_FUNC -> VARS .)


state 115

    (39) MAS_EXPRESIONES -> OPERADORES EXP .

    SEMICOLON       reduce using rule 39 (MAS_EXPRESIONES -> OPERADORES EXP .)
    COMMA           reduce using rule 39 (MAS_EXPRESIONES -> OPERADORES EXP .)
    RIGHT_PARENTHESIS reduce using rule 39 (MAS_EXPRESIONES -> OPERADORES EXP .)


state 116

    (44) MAS_EXP -> OPERADORES_EXP EXP .

    GREATER_THAN    reduce using rule 44 (MAS_EXP -> OPERADORES_EXP EXP .)
    LESS_THAN       reduce using rule 44 (MAS_EXP -> OPERADORES_EXP EXP .)
    NOT_EQUAL       reduce using rule 44 (MAS_EXP -> OPERADORES_EXP EXP .)
    SEMICOLON       reduce using rule 44 (MAS_EXP -> OPERADORES_EXP EXP .)
    COMMA           reduce using rule 44 (MAS_EXP -> OPERADORES_EXP EXP .)
    RIGHT_PARENTHESIS reduce using rule 44 (MAS_EXP -> OPERADORES_EXP EXP .)


state 117

    (50) MAS_TERMINO -> OPERADORES_TER TERMINO .

    PLUS            reduce using rule 50 (MAS_TERMINO -> OPERADORES_TER TERMINO .)
    MINUS           reduce using rule 50 (MAS_TERMINO -> OPERADORES_TER TERMINO .)
    GREATER_THAN    reduce using rule 50 (MAS_TERMINO -> OPERADORES_TER TERMINO .)
    LESS_THAN       reduce using rule 50 (MAS_TERMINO -> OPERADORES_TER TERMINO .)
    NOT_EQUAL       reduce using rule 50 (MAS_TERMINO -> OPERADORES_TER TERMINO .)
    SEMICOLON       reduce using rule 50 (MAS_TERMINO -> OPERADORES_TER TERMINO .)
    COMMA           reduce using rule 50 (MAS_TERMINO -> OPERADORES_TER TERMINO .)
    RIGHT_PARENTHESIS reduce using rule 50 (MAS_TERMINO -> OPERADORES_TER TERMINO .)


state 118

    (54) FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS .

    MULTIPLICATION  reduce using rule 54 (FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS .)
    DIVISION        reduce using rule 54 (FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 54 (FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 54 (FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS .)
    GREATER_THAN    reduce using rule 54 (FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 54 (FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 54 (FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 54 (FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 54 (FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 54 (FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS .)


state 119

    (66) F_CALL -> ID LEFT_PARENTHESIS EXPRESIONES RIGHT_PARENTHESIS SEMICOLON .

    ID              reduce using rule 66 (F_CALL -> ID LEFT_PARENTHESIS EXPRESIONES RIGHT_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 66 (F_CALL -> ID LEFT_PARENTHESIS EXPRESIONES RIGHT_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 66 (F_CALL -> ID LEFT_PARENTHESIS EXPRESIONES RIGHT_PARENTHESIS SEMICOLON .)
    RIGHT_BRACE     reduce using rule 66 (F_CALL -> ID LEFT_PARENTHESIS EXPRESIONES RIGHT_PARENTHESIS SEMICOLON .)


state 120

    (71) LISTA_EXP -> COMMA EXPRESIONES_F .

    RIGHT_PARENTHESIS reduce using rule 71 (LISTA_EXP -> COMMA EXPRESIONES_F .)


state 121

    (62) CONDITION -> IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY . ELSE_CONDITION
    (63) ELSE_CONDITION -> . epsilon
    (64) ELSE_CONDITION -> . ELSE BODY
    (72) epsilon -> .

    ELSE            shift and go to state 127
    ID              reduce using rule 72 (epsilon -> .)
    IF              reduce using rule 72 (epsilon -> .)
    WHILE           reduce using rule 72 (epsilon -> .)
    RIGHT_BRACE     reduce using rule 72 (epsilon -> .)

    ELSE_CONDITION                 shift and go to state 125
    epsilon                        shift and go to state 126

state 122

    (65) CYCLE -> WHILE BODY DO LEFT_PARENTHESIS EXPRESION . RIGHT_PARENTHESIS SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 128


state 123

    (23) LISTA_PARAMETROS -> COMMA DEC_PARAMETROS .

    RIGHT_PARENTHESIS reduce using rule 23 (LISTA_PARAMETROS -> COMMA DEC_PARAMETROS .)


state 124

    (18) FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 129


state 125

    (62) CONDITION -> IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITION .

    ID              reduce using rule 62 (CONDITION -> IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITION .)
    IF              reduce using rule 62 (CONDITION -> IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITION .)
    WHILE           reduce using rule 62 (CONDITION -> IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITION .)
    RIGHT_BRACE     reduce using rule 62 (CONDITION -> IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITION .)


state 126

    (63) ELSE_CONDITION -> epsilon .

    ID              reduce using rule 63 (ELSE_CONDITION -> epsilon .)
    IF              reduce using rule 63 (ELSE_CONDITION -> epsilon .)
    WHILE           reduce using rule 63 (ELSE_CONDITION -> epsilon .)
    RIGHT_BRACE     reduce using rule 63 (ELSE_CONDITION -> epsilon .)


state 127

    (64) ELSE_CONDITION -> ELSE . BODY
    (26) BODY -> . LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE

    LEFT_BRACE      shift and go to state 27

    BODY                           shift and go to state 130

state 128

    (65) CYCLE -> WHILE BODY DO LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 131


state 129

    (18) FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 132


state 130

    (64) ELSE_CONDITION -> ELSE BODY .

    ID              reduce using rule 64 (ELSE_CONDITION -> ELSE BODY .)
    IF              reduce using rule 64 (ELSE_CONDITION -> ELSE BODY .)
    WHILE           reduce using rule 64 (ELSE_CONDITION -> ELSE BODY .)
    RIGHT_BRACE     reduce using rule 64 (ELSE_CONDITION -> ELSE BODY .)


state 131

    (65) CYCLE -> WHILE BODY DO LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS SEMICOLON .

    ID              reduce using rule 65 (CYCLE -> WHILE BODY DO LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 65 (CYCLE -> WHILE BODY DO LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 65 (CYCLE -> WHILE BODY DO LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS SEMICOLON .)
    RIGHT_BRACE     reduce using rule 65 (CYCLE -> WHILE BODY DO LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS SEMICOLON .)


state 132

    (18) FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON .

    VOID            reduce using rule 18 (FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON .)
    MAIN            reduce using rule 18 (FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON .)

