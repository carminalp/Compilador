
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLICATIONDIVISIONCOLON COMMA CTE_FLOAT CTE_INT CTE_STRING DIVISION DO ELSE END EQUAL FLOAT GREATER_THAN ID IF INT LEFT_BRACE LEFT_BRACKET LEFT_PARENTHESIS LESS_THAN MAIN MINUS MULTIPLICATION NOT_EQUAL PLUS PRINT PROGRAM RIGHT_BRACE RIGHT_BRACKET RIGHT_PARENTHESIS SEMICOLON VAR VOID WHILEPROGRAMA : PROGRAM ID SEMICOLON DEC_VARS DEC_FUNCS MAIN BODY ENDDEC_VARS : epsilon\n                | VARSSOLO_FUNCS : FUNCS MAS_FUNCSMAS_FUNCS : epsilon\n                 | SOLO_FUNCSDEC_FUNCS : epsilon\n                 | SOLO_FUNCSVARS : VAR LISTA_VARLISTA_VAR : LISTA_ID COLON TYPE SEMICOLON MAS_VARMAS_VAR : epsilon\n               | LISTA_VARLISTA_ID : ID MAS_IDMAS_ID : COMMA LISTA_ID\n              | epsilonTYPE : INT\n            | FLOATFUNCS : VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLONPARAMETROS : epsilon\n                  | DEC_PARAMETROSDEC_PARAMETROS : ID COLON TYPE LISTA_PARAMETROSLISTA_PARAMETROS : epsilon\n                        | COMMA DEC_PARAMETROSVARS_FUNC : epsilon\n                 | VARSBODY : LEFT_BRACE DEC_STATEMENTS RIGHT_BRACEDEC_STATEMENTS : epsilon\n                      | LISTA_STATEMENTSLISTA_STATEMENTS : STATEMENT MAS_STATEMENTSMAS_STATEMENTS : epsilon\n                      | LISTA_STATEMENTSSTATEMENT : ASSIGN\n                 | CONDITION\n                 | CYCLE\n                 | F_CALL\n    ASSIGN : ID EQUAL EXPRESION SEMICOLONEXPRESION : EXP MAS_EXPRESIONESMAS_EXPRESIONES : epsilon\n                       | OPERADORES EXPOPERADORES : GREATER_THAN\n                  | LESS_THAN\n                  | NOT_EQUALEXP : TERMINO MAS_EXPMAS_EXP : OPERADORES_EXP EXP\n               | epsilonOPERADORES_EXP : PLUS\n                      | MINUSTERMINO : FACTOR MAS_TERMINOMAS_TERMINO : epsilon\n                   | OPERADORES_TER TERMINOOPERADORES_TER : MULTIPLICATION\n                      | DIVISIONFACTOR : OPERADORES_FACTOR ID_CTE\n              | LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESISID_CTE : ID\n              | CTEOPERADORES_FACTOR : PLUS\n                         | MINUS\n                         | epsilonCTE : CTE_INT\n           | CTE_FLOATCONDITION : IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITIONELSE_CONDITION : epsilon\n                      | ELSE BODYCYCLE : WHILE BODY DO LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS SEMICOLONF_CALL : ID LEFT_PARENTHESIS EXPRESIONES RIGHT_PARENTHESIS SEMICOLONEXPRESIONES : epsilon\n                   | EXPRESIONES_FEXPRESIONES_F : EXPRESION LISTA_EXPLISTA_EXP : epsilon\n                 | COMMA EXPRESIONES_Fepsilon :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,33,],[0,-1,]),'ID':([2,8,13,24,27,28,37,38,39,40,41,49,50,54,55,56,67,68,69,70,71,73,80,83,84,85,86,88,90,91,94,95,96,106,108,111,119,121,125,126,130,131,],[3,16,21,16,42,45,42,-32,-33,-34,-35,16,-26,-72,-72,-72,98,-72,-57,-58,-59,-59,-36,-72,-40,-41,-42,-72,-46,-47,-72,-51,-52,-72,-72,45,-66,-72,-62,-63,-64,-65,]),'SEMICOLON':([3,29,30,31,63,64,65,66,81,82,87,89,92,93,97,98,99,100,101,103,115,116,117,118,128,129,],[4,49,-16,-17,80,-72,-72,-72,-37,-38,-43,-45,-48,-49,-53,-55,-56,-60,-61,119,-39,-44,-50,-54,131,132,]),'VOID':([4,5,6,7,12,14,49,60,61,62,132,],[-72,13,-2,-3,13,-9,-72,-10,-11,-12,-18,]),'MAIN':([4,5,6,7,9,10,11,12,14,18,19,20,49,60,61,62,132,],[-72,-72,-2,-3,17,-7,-8,-72,-9,-4,-5,-6,-72,-10,-11,-12,-18,]),'VAR':([4,79,],[8,8,]),'LEFT_BRACE':([14,17,44,49,60,61,62,79,107,112,113,114,127,],[-9,27,27,-72,-10,-11,-12,-72,27,27,-24,-25,27,]),'COLON':([15,16,23,25,32,45,],[22,-72,-13,-15,-14,58,]),'COMMA':([16,30,31,64,65,66,75,78,81,82,87,89,92,93,97,98,99,100,101,115,116,117,118,],[24,-16,-17,-72,-72,-72,106,111,-37,-38,-43,-45,-48,-49,-53,-55,-56,-60,-61,-39,-44,-50,-54,]),'LEFT_PARENTHESIS':([21,42,43,54,55,56,68,77,83,84,85,86,88,90,91,94,95,96,106,108,],[28,55,56,68,68,68,68,108,68,-40,-41,-42,68,-46,-47,68,-51,-52,68,68,]),'INT':([22,58,],[30,30,]),'FLOAT':([22,58,],[31,31,]),'END':([26,50,],[33,-26,]),'RIGHT_BRACE':([27,34,35,36,37,38,39,40,41,50,51,52,53,80,119,121,125,126,130,131,],[-72,50,-27,-28,-72,-32,-33,-34,-35,-26,-29,-30,-31,-36,-66,-72,-62,-63,-64,-65,]),'IF':([27,37,38,39,40,41,50,80,119,121,125,126,130,131,],[43,43,-32,-33,-34,-35,-26,-36,-66,-72,-62,-63,-64,-65,]),'WHILE':([27,37,38,39,40,41,50,80,119,121,125,126,130,131,],[44,44,-32,-33,-34,-35,-26,-36,-66,-72,-62,-63,-64,-65,]),'RIGHT_PARENTHESIS':([28,30,31,46,47,48,55,64,65,66,72,73,74,75,76,78,81,82,87,89,92,93,97,98,99,100,101,102,104,105,109,110,115,116,117,118,120,122,123,],[-72,-16,-17,59,-19,-20,-72,-72,-72,-72,103,-67,-68,-72,107,-72,-37,-38,-43,-45,-48,-49,-53,-55,-56,-60,-61,118,-69,-70,-21,-22,-39,-44,-50,-54,-71,128,-23,]),'EQUAL':([42,],[54,]),'DO':([50,57,],[-26,77,]),'ELSE':([50,121,],[-26,127,]),'RIGHT_BRACKET':([50,124,],[-26,129,]),'PLUS':([54,55,56,65,66,68,83,84,85,86,88,90,91,92,93,94,95,96,97,98,99,100,101,106,108,117,118,],[69,69,69,90,-72,69,69,-40,-41,-42,69,-46,-47,-48,-49,69,-51,-52,-53,-55,-56,-60,-61,69,69,-50,-54,]),'MINUS':([54,55,56,65,66,68,83,84,85,86,88,90,91,92,93,94,95,96,97,98,99,100,101,106,108,117,118,],[70,70,70,91,-72,70,70,-40,-41,-42,70,-46,-47,-48,-49,70,-51,-52,-53,-55,-56,-60,-61,70,70,-50,-54,]),'CTE_INT':([54,55,56,67,68,69,70,71,73,83,84,85,86,88,90,91,94,95,96,106,108,],[-72,-72,-72,100,-72,-57,-58,-59,-59,-72,-40,-41,-42,-72,-46,-47,-72,-51,-52,-72,-72,]),'CTE_FLOAT':([54,55,56,67,68,69,70,71,73,83,84,85,86,88,90,91,94,95,96,106,108,],[-72,-72,-72,101,-72,-57,-58,-59,-59,-72,-40,-41,-42,-72,-46,-47,-72,-51,-52,-72,-72,]),'LEFT_BRACKET':([59,],[79,]),'GREATER_THAN':([64,65,66,87,89,92,93,97,98,99,100,101,116,117,118,],[84,-72,-72,-43,-45,-48,-49,-53,-55,-56,-60,-61,-44,-50,-54,]),'LESS_THAN':([64,65,66,87,89,92,93,97,98,99,100,101,116,117,118,],[85,-72,-72,-43,-45,-48,-49,-53,-55,-56,-60,-61,-44,-50,-54,]),'NOT_EQUAL':([64,65,66,87,89,92,93,97,98,99,100,101,116,117,118,],[86,-72,-72,-43,-45,-48,-49,-53,-55,-56,-60,-61,-44,-50,-54,]),'MULTIPLICATION':([66,97,98,99,100,101,118,],[95,-53,-55,-56,-60,-61,-54,]),'DIVISION':([66,97,98,99,100,101,118,],[96,-53,-55,-56,-60,-61,-54,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAMA':([0,],[1,]),'DEC_VARS':([4,],[5,]),'epsilon':([4,5,12,16,27,28,37,49,54,55,56,64,65,66,68,75,78,79,83,88,94,106,108,121,],[6,10,19,25,35,47,52,61,71,73,71,82,89,93,71,105,110,113,71,71,71,71,71,126,]),'VARS':([4,79,],[7,114,]),'DEC_FUNCS':([5,],[9,]),'SOLO_FUNCS':([5,12,],[11,20,]),'FUNCS':([5,12,],[12,12,]),'LISTA_VAR':([8,49,],[14,62,]),'LISTA_ID':([8,24,49,],[15,32,15,]),'MAS_FUNCS':([12,],[18,]),'MAS_ID':([16,],[23,]),'BODY':([17,44,107,112,127,],[26,57,121,124,130,]),'TYPE':([22,58,],[29,78,]),'DEC_STATEMENTS':([27,],[34,]),'LISTA_STATEMENTS':([27,37,],[36,53,]),'STATEMENT':([27,37,],[37,37,]),'ASSIGN':([27,37,],[38,38,]),'CONDITION':([27,37,],[39,39,]),'CYCLE':([27,37,],[40,40,]),'F_CALL':([27,37,],[41,41,]),'PARAMETROS':([28,],[46,]),'DEC_PARAMETROS':([28,111,],[48,123,]),'MAS_STATEMENTS':([37,],[51,]),'MAS_VAR':([49,],[60,]),'EXPRESION':([54,55,56,68,106,108,],[63,75,76,102,75,122,]),'EXP':([54,55,56,68,83,88,106,108,],[64,64,64,64,115,116,64,64,]),'TERMINO':([54,55,56,68,83,88,94,106,108,],[65,65,65,65,65,65,117,65,65,]),'FACTOR':([54,55,56,68,83,88,94,106,108,],[66,66,66,66,66,66,66,66,66,]),'OPERADORES_FACTOR':([54,55,56,68,83,88,94,106,108,],[67,67,67,67,67,67,67,67,67,]),'EXPRESIONES':([55,],[72,]),'EXPRESIONES_F':([55,106,],[74,120,]),'MAS_EXPRESIONES':([64,],[81,]),'OPERADORES':([64,],[83,]),'MAS_EXP':([65,],[87,]),'OPERADORES_EXP':([65,],[88,]),'MAS_TERMINO':([66,],[92,]),'OPERADORES_TER':([66,],[94,]),'ID_CTE':([67,],[97,]),'CTE':([67,],[99,]),'LISTA_EXP':([75,],[104,]),'LISTA_PARAMETROS':([78,],[109,]),'VARS_FUNC':([79,],[112,]),'ELSE_CONDITION':([121,],[125,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAMA","S'",1,None,None,None),
  ('PROGRAMA -> PROGRAM ID SEMICOLON DEC_VARS DEC_FUNCS MAIN BODY END','PROGRAMA',8,'p_program','parser.py',17),
  ('DEC_VARS -> epsilon','DEC_VARS',1,'p_dec_vars','parser.py',22),
  ('DEC_VARS -> VARS','DEC_VARS',1,'p_dec_vars','parser.py',23),
  ('SOLO_FUNCS -> FUNCS MAS_FUNCS','SOLO_FUNCS',2,'p_solo_funcs','parser.py',31),
  ('MAS_FUNCS -> epsilon','MAS_FUNCS',1,'p_mas_funcs','parser.py',36),
  ('MAS_FUNCS -> SOLO_FUNCS','MAS_FUNCS',1,'p_mas_funcs','parser.py',37),
  ('DEC_FUNCS -> epsilon','DEC_FUNCS',1,'p_dec_funcs','parser.py',45),
  ('DEC_FUNCS -> SOLO_FUNCS','DEC_FUNCS',1,'p_dec_funcs','parser.py',46),
  ('VARS -> VAR LISTA_VAR','VARS',2,'p_vars','parser.py',56),
  ('LISTA_VAR -> LISTA_ID COLON TYPE SEMICOLON MAS_VAR','LISTA_VAR',5,'p_lista_var','parser.py',61),
  ('MAS_VAR -> epsilon','MAS_VAR',1,'p_mas_var','parser.py',66),
  ('MAS_VAR -> LISTA_VAR','MAS_VAR',1,'p_mas_var','parser.py',67),
  ('LISTA_ID -> ID MAS_ID','LISTA_ID',2,'p_lista_id','parser.py',75),
  ('MAS_ID -> COMMA LISTA_ID','MAS_ID',2,'p_mas_id','parser.py',80),
  ('MAS_ID -> epsilon','MAS_ID',1,'p_mas_id','parser.py',81),
  ('TYPE -> INT','TYPE',1,'p_type','parser.py',91),
  ('TYPE -> FLOAT','TYPE',1,'p_type','parser.py',92),
  ('FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON','FUNCS',10,'p_funcs','parser.py',99),
  ('PARAMETROS -> epsilon','PARAMETROS',1,'p_parametros','parser.py',104),
  ('PARAMETROS -> DEC_PARAMETROS','PARAMETROS',1,'p_parametros','parser.py',105),
  ('DEC_PARAMETROS -> ID COLON TYPE LISTA_PARAMETROS','DEC_PARAMETROS',4,'p_dec_parametros','parser.py',113),
  ('LISTA_PARAMETROS -> epsilon','LISTA_PARAMETROS',1,'p_lista_parametros','parser.py',118),
  ('LISTA_PARAMETROS -> COMMA DEC_PARAMETROS','LISTA_PARAMETROS',2,'p_lista_parametros','parser.py',119),
  ('VARS_FUNC -> epsilon','VARS_FUNC',1,'p_vars_func','parser.py',127),
  ('VARS_FUNC -> VARS','VARS_FUNC',1,'p_vars_func','parser.py',128),
  ('BODY -> LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE','BODY',3,'p_body','parser.py',138),
  ('DEC_STATEMENTS -> epsilon','DEC_STATEMENTS',1,'p_dec_staments','parser.py',143),
  ('DEC_STATEMENTS -> LISTA_STATEMENTS','DEC_STATEMENTS',1,'p_dec_staments','parser.py',144),
  ('LISTA_STATEMENTS -> STATEMENT MAS_STATEMENTS','LISTA_STATEMENTS',2,'p_lista_staments','parser.py',152),
  ('MAS_STATEMENTS -> epsilon','MAS_STATEMENTS',1,'p_mas_staments','parser.py',157),
  ('MAS_STATEMENTS -> LISTA_STATEMENTS','MAS_STATEMENTS',1,'p_mas_staments','parser.py',158),
  ('STATEMENT -> ASSIGN','STATEMENT',1,'p_statement','parser.py',168),
  ('STATEMENT -> CONDITION','STATEMENT',1,'p_statement','parser.py',169),
  ('STATEMENT -> CYCLE','STATEMENT',1,'p_statement','parser.py',170),
  ('STATEMENT -> F_CALL','STATEMENT',1,'p_statement','parser.py',171),
  ('ASSIGN -> ID EQUAL EXPRESION SEMICOLON','ASSIGN',4,'p_assign','parser.py',179),
  ('EXPRESION -> EXP MAS_EXPRESIONES','EXPRESION',2,'p_expresion','parser.py',186),
  ('MAS_EXPRESIONES -> epsilon','MAS_EXPRESIONES',1,'p_mas_expresiones','parser.py',191),
  ('MAS_EXPRESIONES -> OPERADORES EXP','MAS_EXPRESIONES',2,'p_mas_expresiones','parser.py',192),
  ('OPERADORES -> GREATER_THAN','OPERADORES',1,'p_operadores','parser.py',200),
  ('OPERADORES -> LESS_THAN','OPERADORES',1,'p_operadores','parser.py',201),
  ('OPERADORES -> NOT_EQUAL','OPERADORES',1,'p_operadores','parser.py',202),
  ('EXP -> TERMINO MAS_EXP','EXP',2,'p_exp','parser.py',209),
  ('MAS_EXP -> OPERADORES_EXP EXP','MAS_EXP',2,'p_mas_exp','parser.py',214),
  ('MAS_EXP -> epsilon','MAS_EXP',1,'p_mas_exp','parser.py',215),
  ('OPERADORES_EXP -> PLUS','OPERADORES_EXP',1,'p_operadores_exp','parser.py',223),
  ('OPERADORES_EXP -> MINUS','OPERADORES_EXP',1,'p_operadores_exp','parser.py',224),
  ('TERMINO -> FACTOR MAS_TERMINO','TERMINO',2,'p_termino','parser.py',231),
  ('MAS_TERMINO -> epsilon','MAS_TERMINO',1,'p_mas_termino','parser.py',236),
  ('MAS_TERMINO -> OPERADORES_TER TERMINO','MAS_TERMINO',2,'p_mas_termino','parser.py',237),
  ('OPERADORES_TER -> MULTIPLICATION','OPERADORES_TER',1,'p_operadores_ter','parser.py',245),
  ('OPERADORES_TER -> DIVISION','OPERADORES_TER',1,'p_operadores_ter','parser.py',246),
  ('FACTOR -> OPERADORES_FACTOR ID_CTE','FACTOR',2,'p_factor','parser.py',253),
  ('FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS','FACTOR',3,'p_factor','parser.py',254),
  ('ID_CTE -> ID','ID_CTE',1,'p_id_cte','parser.py',262),
  ('ID_CTE -> CTE','ID_CTE',1,'p_id_cte','parser.py',263),
  ('OPERADORES_FACTOR -> PLUS','OPERADORES_FACTOR',1,'p_operadores_factor','parser.py',268),
  ('OPERADORES_FACTOR -> MINUS','OPERADORES_FACTOR',1,'p_operadores_factor','parser.py',269),
  ('OPERADORES_FACTOR -> epsilon','OPERADORES_FACTOR',1,'p_operadores_factor','parser.py',270),
  ('CTE -> CTE_INT','CTE',1,'p_cte','parser.py',280),
  ('CTE -> CTE_FLOAT','CTE',1,'p_cte','parser.py',281),
  ('CONDITION -> IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITION','CONDITION',6,'p_condition','parser.py',288),
  ('ELSE_CONDITION -> epsilon','ELSE_CONDITION',1,'p_else','parser.py',293),
  ('ELSE_CONDITION -> ELSE BODY','ELSE_CONDITION',2,'p_else','parser.py',294),
  ('CYCLE -> WHILE BODY DO LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS SEMICOLON','CYCLE',7,'p_cycle','parser.py',304),
  ('F_CALL -> ID LEFT_PARENTHESIS EXPRESIONES RIGHT_PARENTHESIS SEMICOLON','F_CALL',5,'p_f_call','parser.py',311),
  ('EXPRESIONES -> epsilon','EXPRESIONES',1,'p_expresiones','parser.py',316),
  ('EXPRESIONES -> EXPRESIONES_F','EXPRESIONES',1,'p_expresiones','parser.py',317),
  ('EXPRESIONES_F -> EXPRESION LISTA_EXP','EXPRESIONES_F',2,'p_expresiones_f','parser.py',325),
  ('LISTA_EXP -> epsilon','LISTA_EXP',1,'p_lista_exp','parser.py',330),
  ('LISTA_EXP -> COMMA EXPRESIONES_F','LISTA_EXP',2,'p_lista_exp','parser.py',331),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','parser.py',339),
]
