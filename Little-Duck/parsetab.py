
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLICATIONDIVISIONCOLON COMMA CTE_FLOAT CTE_INT CTE_STRING DIVISION DO ELSE END EQUAL FLOAT GREATER_THAN ID IF INT LEFT_BRACE LEFT_BRACKET LEFT_PARENTHESIS LESS_THAN MAIN MINUS MULTIPLICATION NOT_EQUAL PLUS PRINT PROGRAM RIGHT_BRACE RIGHT_BRACKET RIGHT_PARENTHESIS SEMICOLON VAR VOID WHILEPROGRAMA : PROGRAM ID SEMICOLON DEC_VARS DEC_FUNCS MAIN BODY ENDDEC_VARS : epsilon\n                | VARSSOLO_FUNCS : FUNCS MAS_FUNCSMAS_FUNCS : epsilon\n                 | SOLO_FUNCSDEC_FUNCS : epsilon\n                 | SOLO_FUNCSVARS : VAR LISTA_VARLISTA_VAR : LISTA_ID COLON TYPE SEMICOLON MAS_VARMAS_VAR : epsilon\n               | LISTA_VARLISTA_ID : ID MAS_IDMAS_ID : COMMA LISTA_ID\n              | epsilonTYPE : INT\n            | FLOATFUNCS : VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLONPARAMETROS : epsilon\n                  | DEC_PARAMETROSDEC_PARAMETROS : ID COLON TYPE LISTA_PARAMETROSLISTA_PARAMETROS : epsilon\n                        | COMMA DEC_PARAMETROSVARS_FUNC : epsilon\n                 | VARSBODY : LEFT_BRACE DEC_STATEMENTS RIGHT_BRACEDEC_STATEMENTS : epsilon\n                      | LISTA_STATEMENTSLISTA_STATEMENTS : STATEMENT MAS_STATEMENTSMAS_STATEMENTS : epsilon\n                      | LISTA_STATEMENTSSTATEMENT : ASSIGN\n                 | CONDITION\n    ASSIGN : ID EQUAL EXPRESION SEMICOLONEXPRESION : EXP MAS_EXPRESIONESMAS_EXPRESIONES : epsilon\n                       | OPERADORES EXPOPERADORES : GREATER_THAN\n                  | LESS_THAN\n                  | NOT_EQUALEXP : TERMINO MAS_EXPMAS_EXP : OPERADORES_EXP EXP\n               | epsilonOPERADORES_EXP : PLUS\n                      | MINUSTERMINO : FACTOR MAS_TERMINOMAS_TERMINO : epsilon\n                   | OPERADORES_TER TERMINOOPERADORES_TER : MULTIPLICATION\n                      | DIVISIONFACTOR : OPERADORES_FACTOR ID_CTE\n              | LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESISID_CTE : ID\n              | CTEOPERADORES_FACTOR : PLUS\n                         | MINUS\n                         | epsilonCTE : CTE_INT\n           | CTE_FLOATCONDITION : IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITIONELSE_CONDITION : epsilon\n                      | ELSE BODYepsilon :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,33,],[0,-1,]),'ID':([2,8,13,24,27,28,37,38,39,46,47,51,52,62,63,64,65,66,70,73,74,75,76,78,80,81,84,85,86,96,104,107,108,111,],[3,16,21,16,40,42,40,-32,-33,16,-26,-63,-63,88,-63,-55,-56,-57,-34,-63,-38,-39,-40,-63,-44,-45,-63,-49,-50,42,-63,-60,-61,-62,]),'SEMICOLON':([3,29,30,31,58,59,60,61,71,72,77,79,82,83,87,88,89,90,91,100,101,102,103,110,],[4,46,-16,-17,70,-63,-63,-63,-35,-36,-41,-43,-46,-47,-51,-53,-54,-58,-59,-37,-42,-48,-52,112,]),'VOID':([4,5,6,7,12,14,46,55,56,57,112,],[-63,13,-2,-3,13,-9,-63,-10,-11,-12,-18,]),'MAIN':([4,5,6,7,9,10,11,12,14,18,19,20,46,55,56,57,112,],[-63,-63,-2,-3,17,-7,-8,-63,-9,-4,-5,-6,-63,-10,-11,-12,-18,]),'VAR':([4,69,],[8,8,]),'LEFT_BRACE':([14,17,46,55,56,57,69,93,97,98,99,109,],[-9,27,-63,-10,-11,-12,-63,27,27,-24,-25,27,]),'COLON':([15,16,23,25,32,42,],[22,-63,-13,-15,-14,53,]),'COMMA':([16,30,31,68,],[24,-16,-17,96,]),'LEFT_PARENTHESIS':([21,41,51,52,63,73,74,75,76,78,80,81,84,85,86,],[28,52,63,63,63,63,-38,-39,-40,63,-44,-45,63,-49,-50,]),'INT':([22,53,],[30,30,]),'FLOAT':([22,53,],[31,31,]),'END':([26,47,],[33,-26,]),'RIGHT_BRACE':([27,34,35,36,37,38,39,47,48,49,50,70,104,107,108,111,],[-63,47,-27,-28,-63,-32,-33,-26,-29,-30,-31,-34,-63,-60,-61,-62,]),'IF':([27,37,38,39,47,70,104,107,108,111,],[41,41,-32,-33,-26,-34,-63,-60,-61,-62,]),'RIGHT_PARENTHESIS':([28,30,31,43,44,45,59,60,61,67,68,71,72,77,79,82,83,87,88,89,90,91,92,94,95,100,101,102,103,105,],[-63,-16,-17,54,-19,-20,-63,-63,-63,93,-63,-35,-36,-41,-43,-46,-47,-51,-53,-54,-58,-59,103,-21,-22,-37,-42,-48,-52,-23,]),'EQUAL':([40,],[51,]),'ELSE':([47,104,],[-26,109,]),'RIGHT_BRACKET':([47,106,],[-26,110,]),'PLUS':([51,52,60,61,63,73,74,75,76,78,80,81,82,83,84,85,86,87,88,89,90,91,102,103,],[64,64,80,-63,64,64,-38,-39,-40,64,-44,-45,-46,-47,64,-49,-50,-51,-53,-54,-58,-59,-48,-52,]),'MINUS':([51,52,60,61,63,73,74,75,76,78,80,81,82,83,84,85,86,87,88,89,90,91,102,103,],[65,65,81,-63,65,65,-38,-39,-40,65,-44,-45,-46,-47,65,-49,-50,-51,-53,-54,-58,-59,-48,-52,]),'CTE_INT':([51,52,62,63,64,65,66,73,74,75,76,78,80,81,84,85,86,],[-63,-63,90,-63,-55,-56,-57,-63,-38,-39,-40,-63,-44,-45,-63,-49,-50,]),'CTE_FLOAT':([51,52,62,63,64,65,66,73,74,75,76,78,80,81,84,85,86,],[-63,-63,91,-63,-55,-56,-57,-63,-38,-39,-40,-63,-44,-45,-63,-49,-50,]),'LEFT_BRACKET':([54,],[69,]),'GREATER_THAN':([59,60,61,77,79,82,83,87,88,89,90,91,101,102,103,],[74,-63,-63,-41,-43,-46,-47,-51,-53,-54,-58,-59,-42,-48,-52,]),'LESS_THAN':([59,60,61,77,79,82,83,87,88,89,90,91,101,102,103,],[75,-63,-63,-41,-43,-46,-47,-51,-53,-54,-58,-59,-42,-48,-52,]),'NOT_EQUAL':([59,60,61,77,79,82,83,87,88,89,90,91,101,102,103,],[76,-63,-63,-41,-43,-46,-47,-51,-53,-54,-58,-59,-42,-48,-52,]),'MULTIPLICATION':([61,87,88,89,90,91,103,],[85,-51,-53,-54,-58,-59,-52,]),'DIVISION':([61,87,88,89,90,91,103,],[86,-51,-53,-54,-58,-59,-52,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAMA':([0,],[1,]),'DEC_VARS':([4,],[5,]),'epsilon':([4,5,12,16,27,28,37,46,51,52,59,60,61,63,68,69,73,78,84,104,],[6,10,19,25,35,44,49,56,66,66,72,79,83,66,95,98,66,66,66,108,]),'VARS':([4,69,],[7,99,]),'DEC_FUNCS':([5,],[9,]),'SOLO_FUNCS':([5,12,],[11,20,]),'FUNCS':([5,12,],[12,12,]),'LISTA_VAR':([8,46,],[14,57,]),'LISTA_ID':([8,24,46,],[15,32,15,]),'MAS_FUNCS':([12,],[18,]),'MAS_ID':([16,],[23,]),'BODY':([17,93,97,109,],[26,104,106,111,]),'TYPE':([22,53,],[29,68,]),'DEC_STATEMENTS':([27,],[34,]),'LISTA_STATEMENTS':([27,37,],[36,50,]),'STATEMENT':([27,37,],[37,37,]),'ASSIGN':([27,37,],[38,38,]),'CONDITION':([27,37,],[39,39,]),'PARAMETROS':([28,],[43,]),'DEC_PARAMETROS':([28,96,],[45,105,]),'MAS_STATEMENTS':([37,],[48,]),'MAS_VAR':([46,],[55,]),'EXPRESION':([51,52,63,],[58,67,92,]),'EXP':([51,52,63,73,78,],[59,59,59,100,101,]),'TERMINO':([51,52,63,73,78,84,],[60,60,60,60,60,102,]),'FACTOR':([51,52,63,73,78,84,],[61,61,61,61,61,61,]),'OPERADORES_FACTOR':([51,52,63,73,78,84,],[62,62,62,62,62,62,]),'MAS_EXPRESIONES':([59,],[71,]),'OPERADORES':([59,],[73,]),'MAS_EXP':([60,],[77,]),'OPERADORES_EXP':([60,],[78,]),'MAS_TERMINO':([61,],[82,]),'OPERADORES_TER':([61,],[84,]),'ID_CTE':([62,],[87,]),'CTE':([62,],[89,]),'LISTA_PARAMETROS':([68,],[94,]),'VARS_FUNC':([69,],[97,]),'ELSE_CONDITION':([104,],[107,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAMA","S'",1,None,None,None),
  ('PROGRAMA -> PROGRAM ID SEMICOLON DEC_VARS DEC_FUNCS MAIN BODY END','PROGRAMA',8,'p_program','parser.py',17),
  ('DEC_VARS -> epsilon','DEC_VARS',1,'p_dec_vars','parser.py',22),
  ('DEC_VARS -> VARS','DEC_VARS',1,'p_dec_vars','parser.py',23),
  ('SOLO_FUNCS -> FUNCS MAS_FUNCS','SOLO_FUNCS',2,'p_solo_funcs','parser.py',31),
  ('MAS_FUNCS -> epsilon','MAS_FUNCS',1,'p_mas_funcs','parser.py',36),
  ('MAS_FUNCS -> SOLO_FUNCS','MAS_FUNCS',1,'p_mas_funcs','parser.py',37),
  ('DEC_FUNCS -> epsilon','DEC_FUNCS',1,'p_dec_funcs','parser.py',45),
  ('DEC_FUNCS -> SOLO_FUNCS','DEC_FUNCS',1,'p_dec_funcs','parser.py',46),
  ('VARS -> VAR LISTA_VAR','VARS',2,'p_vars','parser.py',56),
  ('LISTA_VAR -> LISTA_ID COLON TYPE SEMICOLON MAS_VAR','LISTA_VAR',5,'p_lista_var','parser.py',61),
  ('MAS_VAR -> epsilon','MAS_VAR',1,'p_mas_var','parser.py',66),
  ('MAS_VAR -> LISTA_VAR','MAS_VAR',1,'p_mas_var','parser.py',67),
  ('LISTA_ID -> ID MAS_ID','LISTA_ID',2,'p_lista_id','parser.py',75),
  ('MAS_ID -> COMMA LISTA_ID','MAS_ID',2,'p_mas_id','parser.py',80),
  ('MAS_ID -> epsilon','MAS_ID',1,'p_mas_id','parser.py',81),
  ('TYPE -> INT','TYPE',1,'p_type','parser.py',91),
  ('TYPE -> FLOAT','TYPE',1,'p_type','parser.py',92),
  ('FUNCS -> VOID ID LEFT_PARENTHESIS PARAMETROS RIGHT_PARENTHESIS LEFT_BRACKET VARS_FUNC BODY RIGHT_BRACKET SEMICOLON','FUNCS',10,'p_funcs','parser.py',99),
  ('PARAMETROS -> epsilon','PARAMETROS',1,'p_parametros','parser.py',104),
  ('PARAMETROS -> DEC_PARAMETROS','PARAMETROS',1,'p_parametros','parser.py',105),
  ('DEC_PARAMETROS -> ID COLON TYPE LISTA_PARAMETROS','DEC_PARAMETROS',4,'p_dec_parametros','parser.py',113),
  ('LISTA_PARAMETROS -> epsilon','LISTA_PARAMETROS',1,'p_lista_parametros','parser.py',118),
  ('LISTA_PARAMETROS -> COMMA DEC_PARAMETROS','LISTA_PARAMETROS',2,'p_lista_parametros','parser.py',119),
  ('VARS_FUNC -> epsilon','VARS_FUNC',1,'p_vars_func','parser.py',127),
  ('VARS_FUNC -> VARS','VARS_FUNC',1,'p_vars_func','parser.py',128),
  ('BODY -> LEFT_BRACE DEC_STATEMENTS RIGHT_BRACE','BODY',3,'p_body','parser.py',138),
  ('DEC_STATEMENTS -> epsilon','DEC_STATEMENTS',1,'p_dec_staments','parser.py',143),
  ('DEC_STATEMENTS -> LISTA_STATEMENTS','DEC_STATEMENTS',1,'p_dec_staments','parser.py',144),
  ('LISTA_STATEMENTS -> STATEMENT MAS_STATEMENTS','LISTA_STATEMENTS',2,'p_lista_staments','parser.py',152),
  ('MAS_STATEMENTS -> epsilon','MAS_STATEMENTS',1,'p_mas_staments','parser.py',157),
  ('MAS_STATEMENTS -> LISTA_STATEMENTS','MAS_STATEMENTS',1,'p_mas_staments','parser.py',158),
  ('STATEMENT -> ASSIGN','STATEMENT',1,'p_statement','parser.py',168),
  ('STATEMENT -> CONDITION','STATEMENT',1,'p_statement','parser.py',169),
  ('ASSIGN -> ID EQUAL EXPRESION SEMICOLON','ASSIGN',4,'p_assign','parser.py',177),
  ('EXPRESION -> EXP MAS_EXPRESIONES','EXPRESION',2,'p_expresion','parser.py',184),
  ('MAS_EXPRESIONES -> epsilon','MAS_EXPRESIONES',1,'p_mas_expresiones','parser.py',189),
  ('MAS_EXPRESIONES -> OPERADORES EXP','MAS_EXPRESIONES',2,'p_mas_expresiones','parser.py',190),
  ('OPERADORES -> GREATER_THAN','OPERADORES',1,'p_operadores','parser.py',198),
  ('OPERADORES -> LESS_THAN','OPERADORES',1,'p_operadores','parser.py',199),
  ('OPERADORES -> NOT_EQUAL','OPERADORES',1,'p_operadores','parser.py',200),
  ('EXP -> TERMINO MAS_EXP','EXP',2,'p_exp','parser.py',207),
  ('MAS_EXP -> OPERADORES_EXP EXP','MAS_EXP',2,'p_mas_exp','parser.py',212),
  ('MAS_EXP -> epsilon','MAS_EXP',1,'p_mas_exp','parser.py',213),
  ('OPERADORES_EXP -> PLUS','OPERADORES_EXP',1,'p_operadores_exp','parser.py',221),
  ('OPERADORES_EXP -> MINUS','OPERADORES_EXP',1,'p_operadores_exp','parser.py',222),
  ('TERMINO -> FACTOR MAS_TERMINO','TERMINO',2,'p_termino','parser.py',229),
  ('MAS_TERMINO -> epsilon','MAS_TERMINO',1,'p_mas_termino','parser.py',234),
  ('MAS_TERMINO -> OPERADORES_TER TERMINO','MAS_TERMINO',2,'p_mas_termino','parser.py',235),
  ('OPERADORES_TER -> MULTIPLICATION','OPERADORES_TER',1,'p_operadores_ter','parser.py',243),
  ('OPERADORES_TER -> DIVISION','OPERADORES_TER',1,'p_operadores_ter','parser.py',244),
  ('FACTOR -> OPERADORES_FACTOR ID_CTE','FACTOR',2,'p_factor','parser.py',251),
  ('FACTOR -> LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS','FACTOR',3,'p_factor','parser.py',252),
  ('ID_CTE -> ID','ID_CTE',1,'p_id_cte','parser.py',260),
  ('ID_CTE -> CTE','ID_CTE',1,'p_id_cte','parser.py',261),
  ('OPERADORES_FACTOR -> PLUS','OPERADORES_FACTOR',1,'p_operadores_factor','parser.py',266),
  ('OPERADORES_FACTOR -> MINUS','OPERADORES_FACTOR',1,'p_operadores_factor','parser.py',267),
  ('OPERADORES_FACTOR -> epsilon','OPERADORES_FACTOR',1,'p_operadores_factor','parser.py',268),
  ('CTE -> CTE_INT','CTE',1,'p_cte','parser.py',278),
  ('CTE -> CTE_FLOAT','CTE',1,'p_cte','parser.py',279),
  ('CONDITION -> IF LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BODY ELSE_CONDITION','CONDITION',6,'p_condition','parser.py',286),
  ('ELSE_CONDITION -> epsilon','ELSE_CONDITION',1,'p_else','parser.py',291),
  ('ELSE_CONDITION -> ELSE BODY','ELSE_CONDITION',2,'p_else','parser.py',292),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','parser.py',300),
]
